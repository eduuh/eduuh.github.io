[{"content":"Ranger Ranger is a console / terminal visual file manager written in Python and with VI key bindings. Ranger is a file manager with a different graphical interface.\nRanger use the Miller colums visual modes support up to nine tabs and most of the key bindings are the same off vi/ vim text editor.\nObjective. Install and configure the Ranger file manager.\n Installation.  To install ranger is pretty simple using your package manager. Since am using arch linux , my package manager is pacman and yay for Aur packages.\npacman -S ranger Distributions. Ranger is available in the repositories of most major distribution. And when am talking about distribution i mean distros such as ubuntu, manjaro, arch ,debian and others. You can use google to confirm how to get ranger working in your installation.\nDifficulty Easy. Trust me it is pretty simple to get started using ranger. When You Use it you are not going back. This statement is only true if you use vim before and you know how to touch type.\nConventions  # - requires given linux commands to be executed with root privileges either directly as a root user or by use of sudo command. $ - requires give linux commands to be executed as a regular non-previleged user.  Introduction. If you enjoy working in the command line like me, but you want some more simple file mangement and operation tool other than the common commands, it might be time to move to a command line-based file manager, like ranger.\nRanger enables some powerful features for managing your files while preserving the light weight control that the command line provides. It that\u0026rsquo;s not enough, Ranger\u0026rsquo;s controls and commands are all based around vim bindings.\nInstalling Ranger. Ranger is available in just about every distribution\u0026rsquo;s main repositories. Use you package manager to install it. The package name is almost always ranger.\nNavigationg with Ranger. Ranger\u0026rsquo;s layout is based on colums . Moving left through the colums moves you up through the directory tree, ending at the filesystem. Moving right, moves you down through the directories.\nIn each columns(directory) you see a listing of the files and directories inside it. When you finally arrive at a file, Ranger will open it based on how it\u0026rsquo;s configured to respond to that extension in.\n~/.config/ranger/rifle.conf Ranger use vi key bindings.If you dont know what thi is please first checkout This topic.\nBasic Commands. Ranger has build in command for handling file operations. Once again, these commands are largely based on vim, so if you\u0026rsquo;re familiar with vim, you\u0026rsquo;ll have no problem adopting this tool.\nTo copy a file , press yy. Then , to paste it, press pp.\nCopying / Deleting Multiple files. Using spacebar to Select Multiple Files. You can select multiple files with the space bar before pressing yy or dd to copy or move multiple files at once.\nNote after selecting the files you can then follow the action you want to do which could be.\n Copy/yank files \u0026ndash;yy Delete files \u0026ndash;dd Rename files \u0026ndash;aa   Moving multiple files across different directories. If you want to move multiple files across different directories, you can use ya and da to add each grouping to a list of files being relocated. After you have everything you want to move , use pp to paste/move them all.\nExiting ranger. Exiting Ranger is easier than exiting vim.\nPress q to quit.\nCommand Interface There\u0026rsquo;s also a couple of useful commands that require you type into the command interface. Like vim, Ranger has a command interface that activates when you press :.\nOnce command that you defintely want is a search.\nRanger\u0026rsquo;s is straightforward.\n:rename newname.txt Do you want to rename a bunch of files at once? Ranger has an excellent tool for that too. Select the files that you want to rename with the space bar. When you're done, enter the command to open up your editor with the list of file names. Edit them and save. Ranger will do the rest.\n:bulkrename File associations When you open up a file with Ranger, it will search its configuration for the right application and open the file. You can edit that configuration to tell Ranger which programs you prefer to associate with each file type.\nBefore you go about modifying configurations, you need to copy them just incase you mess things up and you want to revert back to the default. Ranger has an easy command for that too. Ranger has an easy command for that too.\n$ ranger \u0026ndash;copy-config=all\nRanger will create local copies of its configuration files at ~/.config/ranger. It\u0026rsquo;ll make several files, but for now, you only need one, rifle.conf.\nOpen up that file in your editor. The default settings are pretty good. They have a logic behing them. Each grouping is divided up by file type. Those groups contain a series of line that tell ranger which programs to look.\nMy Remaps Just to remind you that i type using colemak keyboard layout, The default configuration for ranger is optimized for qwerty layout. For the case on my nvim usage i made some custom remapping from h,j,k,l to h,n,e,i. I want all my environment to be consistent to this custom keybindings. Check how i achieve this.\n To checkout all my ranger rc.conf file. Checkout my dotfile repository.\nThanks for reading. Next write on ranger i will explain my rc.conf configuration line by line and the riffle.conf file too.\n","description":"Ranger is a console / terminal visual file manager written in Python and with VI key bindings. Ranger is a file manager with a different graphical interface.","id":2,"section":"posts","tags":["productivity","ranger","cli"],"title":"Ranger - Visual file manager","uri":"https://eduuh.codes/posts/ranger/"},{"content":"Installations.  Two step install.  We can use git to install fzf: git clone \u0026ndash;depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install The above command will install fzf under ~/.fzf/bin. If you want to enable fzf inside Neovim, add the following setting to Neovim configuration (suppose your plugins manager is vim-plug ).\nPlug \u0026lsquo;~/.fzf\u0026rsquo; One step install We can install fzf and enable it inside Neovim in one step. Use the following configuration for Neovim:\nWe can install Fzf and enable it inside Neovim in one step. Use the following configurations for neovim:\nPlug \u0026lsquo;junegunn/fzf\u0026rsquo;, { \u0026lsquo;dir\u0026rsquo;: \u0026lsquo;~/.fzf\u0026rsquo;, \u0026lsquo;do\u0026rsquo;: \u0026lsquo;./install \u0026ndash;all\u0026rsquo; } You can change the directory where you want to install fzf.\nHow to use As Nvim plugin Inside Nvim, we can search and open files quickly using the command provided by fzf.\n:FZF \u0026quot; find file under current directory\n:FZF ~\u0026rdquo; find file under HOME directory For convenience, we can add shortcut mappings for the above commands.\nnnoremap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;f :FZF\u0026lt;cr\u0026gt;\nnnoremap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;F :FZF ~\u0026lt;cr\u0026gt; You can use ctrl + N and ctrl + P or the arrow key to navigate through the list of files found by fzf. To open the file in Neovim, Fzf provides several shortcut key.\nEnter key : open file in current window\nCtrl + T: open file in new tab page\nCtrl + X: open file in new horizontal window\nCtrl + V: open file in new vertical window To close the file search window, use Esc or Ctrl + c.\nUse fzf with other command. You can also use fzf in conjuction witho other command. Fox exmple, you can use fzf and nvim together. Fzf is used to find and the oepn the file in nvim;\nnvim $(fzf) The command is useful in using in bash prompt. To find files wth fzf and open them with nvim. Placed the line in my aliaserc file.\nalias fs=\u0026quot;nvim $(fzf)\u0026quot; Use fzf alone.(In the Command Line) Fzf provides several command-line shortcut after installation.\n Ctrl + T: paste the path of file or directory found on the cli. Ctrl + R: find history command and paste command on the cli. Alt + C: cd to specific directory   Note that ctrl + T n Alt + c will only find file or folder under current directory. If you can not find a file, please make sure that it exists under current directory.\nBy default, fzf use find to search files. You can use the variable FZF_DEFAULT_COMMAND to change the default search command. For example, f you have installed the silver searcher, AKA, ag you may want to use the following setting in your .bash_profile\nexport FZF_DEFAULT_COMMAND='ag \u0026ndash;hidden \u0026ndash;ignore .git -g \u0026ldquo;\u0026quot;' Autocompletion on command Line When you are using vim and cd you can activate file and directory fuzzy completion with ** as a trigger (press tab to trigger autocompletion.).\nvim \u0026lt;TAB\u0026gt;\ncd \u0026lt;TAB\u0026gt; The auto-completion function only supports a few commands. If you want to add your own command, say pylint, it is easy to set up. Following the guide here you need to add the below command to your .bash_profile.\nDo not forget to soure your .bash_profile. Then you can trigger auto-complet for pylint just like what you do with vim and cd.\nAutocompletion for environment variable. fzf can also auto-complete environment variable.\nexport \u0026lt;TAB\u0026gt;\nunalias \u0026lt;TAB\u0026gt;\nunset \u0026lt;TAB\u0026gt; Search hidden file by default. By default, fzf does not search hidden files. In order to search hidden files by default, use the following setting (suppose that you use ag):\nexport FZF_DEFAULT_COMMAND='ag \u0026ndash;hidden \u0026ndash;ignore .git -g \u0026ldquo;\u0026quot;'  ","description":" Fzf is an interactive fuzzy file search tool on the command-line. It is fast and powerful. In this post , I will introduce its installation and usage.","id":3,"section":"posts","tags":["productivity","comandline"],"title":"FZF (Fuzzy Finder)","uri":"https://eduuh.codes/posts/fzfinstallationusage/"},{"content":"My Remaps (General Remaping). My mindset is changing towards what works for me which bring the need to remap the defaults. Over the last few month I have shifted from Qwerty keyboard to colemak keyboard layout. I also made a shift from Windows machine to a Linux box a decision which I have not regretted ever.\nI had written this post before my Major Os shift and my requirement have changed considerably. Let me explain more on that. I am in the process of streamlining my workflow to 100% keyboard centric. This was greatly influeced by the possiblities in a linux box. Something that windows don\u0026rsquo;t offer. The power of choice. Don\u0026rsquo;t get me wrong I still use windows machine. But Linux works for be best.\nCurrently am using a window manager (i3) for window layout management on my linux computer. For computer configuration and tweaking i have no problem using the command line.A keyboard centric approach calls for some remaps at one point in order to be more efficient. What i wanted to achieve are the following.\n  Load Colemak Keyboard Layout.   Remaping caps lock to function as  control key when pressed with other keys. Escape -\u0026gt; Short presses.    Remaping tab lock to function as. Not successful on this one.  super key (Mod4) when pressed with other keys. Tab -\u0026gt; Short presses.    Changing the repeat KeyPresses to be a little more faster.    Explaination Why Window Function as super key(Mod4) Initially i was using caps Lock as my Super key and escape but later i realized it was easier to use it a the window key easy to type with my left 👍. Currently my caps lock function as control and escape. This remap improves my productivity a great deal when working with brave browser and tmux.\nAs i mentioned earlier , am using i3 (improved tiling window manager). Okey edd! what do it do?.Good question👏\nWith i3 am able to do alot of stuff using keyboard shortcuts. The activation key is usually the (super) key often known as Windows key. I will write on how i use I3 window manager but let me mention a few.\n  Basic  Opening a new terminal. (using st terminal) changing window focus.(using activation key and h,n,e,i)    Moving windows  Move window across the screen Moving windows to different workspaces    Using worspaces  Swith to another workspace Move window to another workspace    Opening application / closing windows  Open application lancher (dmenu) kill a window.    Modifying windows  going fullscreen resizing     Considering the above functinality. I need the (Mod4) to be at close proximity to the home row. I don\u0026rsquo;t want to move my hands each time i want to either of the task. I have come to realize that it is easy to type window key with the 👍. If i have problem with using the finger am planning to remap alt to mod4 key.\nCapsLock Function as Escape. Short presses on the capsLock are Escape. This is also my favorite remap i have. I have to admit that am i am learning Vimcraft as i making this big shifts. Vim is a Modular editor and to change between the modes (normal, command_line mode, visual mode) we use Escape key.\nTools Used  xcape : used to remap (CapsLock to a Smartkey) setxkbmap : Used to change the keymaps using Keycodes and keysm. xmodmap to remaps the capslock. xset : to reset the repeat rate of keys.    Changing my keyboard Layout. (Setxkmap)  I found the default keyboard layout is qwerty. My default is colemak. The solution that i found to work for me is to use \u0026lsquo;setxkbmap\u0026rsquo; to change the layout to colemak layout.\nsetxkbmap us -variant colemak \u0026amp; This is how my remaps script looks like. This script is called on startup to remaps keys and set my default keyboard layout.\n xcape  XCAPE allows you to use a modifier key as another key when pressed and released on its own. Note that is is slightly slower than pressing the original key, because press event does not occur until the key is released. The default behaviour is to generate the Escape key when Left Control is Pressed and released on its own.\nRemaps Super_L to produce Escape on short keypress.\nkillall xcape 2\u0026gt;/dev/null ;xcape -e \u0026lsquo;Control_L=Escape\u0026rsquo;\n xset  xset user preferences utility for x. I use this tool to reduce the keypress delay on my linux box by 50%.\nxset r rate 300 50  xmodmap  Utility for modifying keymaps and pointer button mappings in X.\nxmodmap -e \u0026lsquo;keycode 135 = Super_R remaps. (Scripts) A script is just a file with a group of commands that are run by bash. This remaps script is currently run during user login. remaps is a script that contains a series of statements which first loads my default colemake keyboard layout and then remaps my CapsLock to a smart key.\n Archive Notes. I used to use this method but i currently using the above remaps. The caps lock was my superkey for i3craft. but i have shifted to smart key for my productivity.\nRun the commands below to remap capslock to control and escape.\n The effect should apply immediately.\nStep 3. Autostart Append code from Step 2 to file ~/.xprofile to run the command when X starts.\nWindows Option 1:  Download and install AutoHotKey. Use the script CapsLockCtrlEscape.ahk.   This was made possible with a third party software called AutoHotkey described as the Altimate automation script for windows systems.\nI choose to use these program since i plan to do some automations with it in the future.\nI admit i did not write the script for this program myself by i sourced out from github.\nThis script came with something additional that i loved. I did not lose the caps lock fuctionality as in my linux distro. Pressing the two shift keys together activates thes caps lock.\n","description":"Reload the colemak Keyboard layout on my arch distributions and Remaping caps lock to function primary as Escape on short presses and Control when pressed with other keys","id":4,"section":"posts","tags":["productivity","touchtyping","comandline","colemak","keyboard"],"title":"My Keyboard Remaps(Smart CapsLock)","uri":"https://eduuh.codes/posts/remaps/"},{"content":"A simpler way to manage your dotfiles Hey there am edd. I was having trouble with configuration files since I started using docker for my development. I realized I was reconfiguring each time I recreated a new environment. For consistecy and time saving , I decided it would be great if could sync my dotfiles using git and github and when creating new enviroments.\nI wrote the solution in this post, for easy reference if i need to in the future.\nWhat are dotfile Dotfile are file in the linux system that starts with a period. They are mainly used to store configuration files for the User instance for various applications. For me the dotfiles that i would love to manage are as follow.\n i3 (window manager) tmux (terminal multiplexer) zathura (pdf reader) nvim (text editor) setup.sh   Yes setup.sh this is a custom setup script that i maintain to initially setup a new installation with all the setting and softwares i need in my system. Could be used to\n setup the configuration files managed by the git repository. Setup my keyboard mapping to the way a need them to be .   The keyboard mapping i love most, and spend alot of time setting it up is Remapping caps lock to act as a control key when pressed together with other character, and behave as Escape when pressed alone.\nI would love to automate the process , so that i don\u0026rsquo;t even think about it. Like most folks(know this from my research), I use git to manage my dotfiles. This lets me have a versioned backup for my configurations, and if something breaks (and it often does) I can revert to a working configuration fairly easily. I came across a post of how to manage the dotfiles without the need for any symlinking.\nThe key idea is really simple: make $HOME the git work-tree. The normal way of doing this would be to do a git init in you $HOME, but that would totally mess up git commands if you have other repositories in your $HOME (also, you probably don\u0026rsquo;t want your entire $HOME in a git repository.\nWe will create a dummy folder and initialize a bare repository.Essentially a git repo with no working directory in there. All git commands will be run with our dummy as the git directory, but $HOME as the work directory.\nGit bare Repository. A git repository is a repository that is created without a Working Tree but just the contents of what is typically in the .git directory.\nWhy this setup?\nA bare repository is typically used as a Remote Repository that is sharing a repository amoung several different people. You don\u0026rsquo;t do work right inside the remote repository so there\u0026rsquo;s no working Tree.\nManage your dotfiles with bare repository (First Time). Requirements. 1. Git installed.\n2. Create a remote dotfile repository on github or any other service. Setting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir $HOME/.dotfiles\ngit init \u0026ndash;bare $HOME/.dotfiles Now for fun part. We will make an alias for running git commands in our .dotfiles repository. I\u0026rsquo;m calling my alias dotfiles: .Make sure you reference the right dotfiles folder which are anywhere within your $HOME folder.\nThis alias references the git binary and also indicates the Home folder as your working tree.\nalias dotfiles=\u0026rsquo;/usr/bin/git \u0026ndash;git-dir=$HOME/.dotfiles/ \u0026ndash;work-tree=$HOME\u0026rsquo; Add this alias to your .bashrc. From now any git operation you would like to do in the .dotfiles repository can be done by the dotfiles alias. The cool thing is that you can run dotfiles from anywhere.\nSource the url of the remote dotfiles folder and use it to configure the origin.\nLets add a remote and also set status now to show untracked files since there will be a long list of Untracked files. You will only track a few of the files.\ndotfiles config \u0026ndash;local status.showUntrackedFiles no\ndotfiles remote add origin https://github.com/eduuh/dotfiles.git Adding the conf to Source control. Note: Avoid using dotfiles add . since you don\u0026rsquo;t want to and your home folder to your dotfile repository.\nexample:\ndotfiles add .bashrc\ndotfiles commit -m \u0026ldquo;added bash configuration file to source control\u0026rdquo; Note that we create an alias for the current session. In order to make the alias to be available we need to add the line to the configuration file of the terminal that you use. For me I added the line in my .zshrc.\nSetting Up a New Machine With existing Configuration. Method 1 Assumtion is that you are using the above described method to store your dotfiles.Make a backup folder first and backup the default configuration available for your application. But in most cases you man not have them.\nSetting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir $HOME/.dotfiles\ngit init \u0026ndash;bare $HOME/.dotfiles Set up the alias for the current session using the command.\nalias dotfiles=\u0026rsquo;/usr/bin/git \u0026ndash;git-dir=$HOME/.dotfiles/ \u0026ndash;work-tree=$HOME\u0026rsquo; Set up the remote github repository.\ndotfiles config \u0026ndash;local status.showUntrackedFiles no\ndotfiles remote add origin https://github.com/eduuh/dotfiles.git Pull in the changes form your remote repository.\ndotfiles pull origin master\ndotfiles reset \u0026ndash;hard HEAD # ovewrites the Home Directory Method 2 Assuming that your configuration are in github. To set up your computer using your configs is simple.\nTo set up a new machine to use your version controlled config files, all you need to do is to clone the repository on your new machine telling git that it is a bare repository:\nPerform the above steps.\ngit clone \u0026ndash;separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git However, some programs create default config files, so this might fail if git finds an existing config file in your $HOME. In that case a simple sol is to clone to a temporayry directory and then delete it once you are done:\ngit clone \u0026ndash;separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git So this might fail if git finds an existing config file in your $HOME. In that case, a simple solution is to clone to a temporary directory , and then delete it once you are done:\n$ git clone \u0026ndash;separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git \u0026ndash;recursive \u0026ndash;verbose \u0026ndash;exclude \u0026lsquo;.git\u0026rsquo; tmpdotfiles/ $HOME/\nrm -r tmpdotfiles The last step is to add the dotfile alias in your bashrc or zshrc according to the shell you are using.\nalias dotfiles=\u0026rsquo;/usr/bin/git \u0026ndash;git-dir=$HOME/.dotfiles/ \u0026ndash;work-tree=$HOME\u0026rsquo; Using the dotfiles alias For the Dotfiles repository, Your will use dotfiles instead of git. Use it as you normally use git commands.\nExample of some Commands:\nA commit command.\ndotfiles commit -m \u0026ldquo;zshrc =\u0026gt; zsh oh my god configuration files \u0026ldquo;\n[master 64a553b] zshrc =\u0026gt; zsh oh my god configuration files\n1 file changed, 91 insertions(+)\ncreate mode 100644 .zshrc\nA push action.\ndotfiles push\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 1.45 KiB | 1.45 MiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/eduuh/dotfiles.git\n7d507e7..64a553b master -\u0026gt; master The repository will be downloaded but there might exist some configuration files in your home directory to make sure you are using the right configuration file use git checkout to actually copy the copy in your repository to the working directory.\ndotfiles checkout $HOME/.bashrc Or easy is to checkout to the latest commit. Remember Head points to the latest commit use that.\ndotfiles reset \u0026ndash;hard HEAD\nHEAD is now at 64a553b zshrc =\u0026gt; zsh oh my god configuration files\n64a553b at this time this is my latest commit. Do not worry git reset \u0026ndash;hard copied files available in your repository to both the staging area and the working area . It should not mess with your untracted files which i believe they are many, since this is a repository monitoring the $HOME directory.\nThere you go. No symlink mess.\nMy dotfiles are here for reference.\n","description":"Efficient way to manage configuration files in a linux system.","id":5,"section":"posts","tags":["productivity","cli","git"],"title":"Dotfiles sync with bare repository","uri":"https://eduuh.codes/posts/dotfilesmanagement/"},{"content":"Tmux Cheat Sheet \u0026amp; Quick Reference ","description":"The place i must look back to practise what skill i Learned daily","id":6,"section":"posts","tags":["linux"],"title":"Cheatsheet + Daily Stand Up","uri":"https://eduuh.codes/posts/cheatsheet/"},{"content":"Intro. It\u0026rsquo;s tmux a so-called terminal multiplexer. Simply speaking , tmux acts as a window manager within your terminal and allows you to create multiple windows and panes within a single terminal window.\nYour mouse is slowing you down.\nAs we build softwares, we work with multiple programs throughout the course of our day. A web developer, for example, mght have a database console , a web server and a text editor running at the same time. Switching between these windows with the mouse can slow you down.\nUsing tmux, you can create an environment like this right in your terminal managed entirely without a mouse.\nWhat\u0026rsquo;s to learn in the post.  Learning the Basics Configuring tmux Scripting Customized tmux Environments. Working with Text and Buffers. Pair programming with tmux. Workflows with tmux   Who should Read this post. whether you\u0026rsquo;re are a system administrator or a software developer who spends a good part of your time using the terminal and commandline tools and you aim to help you work faster.\nIf you\u0026rsquo;re a software developer, you\u0026rsquo;ll see how to use tmux to build a development environment that cam make workng with multiple terminal sessions a breeze. And if you\u0026rsquo;re comfortable using *VIM or emacs, you\u0026rsquo;ll see how tmux can accelarate your workflow even more\nIf you\u0026rsquo;re a system administrator or a developer who spends some time working with remote servers, you\u0026rsquo;ll be interested in how you can levarage tmux to create a persitent dashboard for managing or monitoring servers.\nRequirements Tmux 2.1 and 2.2 introduced several backwords-incompatible changes that this editon addresses this edivtion also introduced some new options.And tmux is now more populat that it was, so there are more tools and tricks you can use to improve your workflow.\n All example require tmux 2.3 + Tmux is supported under Microsoft\u0026rsquo;s Windows subsystem for Linux. A computer that runs Mac OS X , Windows 10 with Bash support, or a flavor of Unix or Linux. You should also have a good grasp of using command-line tools on a linux or unix system While not required , experience with text editors such as Vim and Emacs might be helpful  tmux works much the same way, and it has some predefined keyboard shortcuts that you may find familiar of you use one of these text editors.    Unfortunately tmux does not run under the reqular windows command prompt or Powershell, but it will run gread on a virtual machine, VPS, or Shared hosting envionment running Linux or FreeBsd. Why Using tmux? 1. Background Operations As we saw above, you can detach a tmux session from a client (the terminal) and you can attach it back. It means that you can run whatever you want in the background, even if you have no terminal open.\nLet\u0026rsquo;s imagine that you need to run a very long script on your remote server. You could:\n Connect to your remote server via SSH. Launch tmux on the remote server. Run a Script which takes hours. Close the SSH connection. The script will still run on the remote server, thanks to tmux!. Switch off your own computer and go home.   2. More Termimals! Everywhere! Tmux allows you to create multiple terminal on a single screen. This is the functionality I use most.\nYou might think: \u0026ldquo;well, great, many terminal emulator can do the same, like terminator.\u0026rdquo;\nThat\u0026rsquo;s true, but tmux is more powerful and consume less resources. You can configure it easily and precisely, according to your specific needs.\nIt works very well with vim too, which makes it mandatory if you want to create a mouseless development environment.\n3. Protection Against Terminal Crashes. Since your tmux session is independent of your terminal, you don\u0026rsquo;t need to worry anymore if you close it or even if it crashes. You can always reattach your session afterword, in a new and shiny terminal!.\n4. Saving tmux sessions It\u0026rsquo;s possible to save tmux sessions in a file and reopen them later, even after switching off your computer.\n5. Remote Pair Programming. A tmux session can be attached to many clients (terminals), even via SSH. Which means that you can do pair programming with another developer using tmux and vim by sharing the same session!.\nHow to use tmux? General Organization. Let\u0026rsquo;s see in more details how to use tmux. This part should answer many potential questions you might have, at that point.\nHere\u0026rsquo;s an example what kind of hierarchy you can with tmux:\nWhen you launch tmux, it will create a tmux-server, a session, a window and a pane.\nTmux Concepts Tmux server The tmux server manage every single tmux sessions. If you kill it, you kill every session as well. You can try it by yourself with the command tmux kill-server.\nSessions We spoke about sessions before. You can detach them from a client (and let them run in the background) and attach them back.\nwindows In tmux, a window represent an entire screen. You can have multiple windows open in one session. You can access each window via a tab in the tmux status bar, at the bottom.\nPanes You can split your windows in panes to have multiple terminals on one screen. Thes panes are independent by default , but you can syncronze them too.\nConventions tmux is a tool that is driven by the keyboard. You\u0026rsquo;ll encounder many keyboard shortcuts throughut the book. Since tmux support both lowercase and uppercase keyboard shortcuts, it may sometime be unclear which key is being referenced\ntmux is case Sensitive.\n Ctrl-b means that \u0026ldquo;press the ctrl and b keys simultaneously.\u0026rdquo; Ctrl-b d means \u0026ldquo;press the Ctrl and b keys simulteneously, then release and the press d\u0026rdquo; $ tmux new-session .The dollar sigh represent the prompt from the bash shell sessions. You won\u0026rsquo;t need to type it when you type the command. It just denotes that this is a command you should type.   Configuring tmux, you can configur tmux with a configuration file called tmux.conf. filenames starting with a period don\u0026rsquo;t show up in directory listing on most system or text editors by default.\nI will be explaning sections of my tmux.conf file and then i will attach the link to the github dotfiles page.\nLearning the Basics Getting started. This is a hand-on guide will get you up and running with tmux pretty quickly. It will only cover the basic feature which should be more than enough to get started and be productive with tmux. simply open your terminal and follow the instructions.\ntmux , by default doesn\u0026rsquo;t have the most friendly commands. Many of the most important and useful features are assigned to hard to reach keystrokes or consist of long, verbose command strings.\nIntroducing the .tmux.conf file. By default , tmux looks for configuration settings in two places. It first looks in /etc/tmux.conf for system-wide configuration. It then looks for a file called .tmux.conf in the current user\u0026rsquo;s home directory.if thes files don\u0026rsquo;t exist , tmux simply uses its default settings.\nExecute the following command in your shell:\ntouch ~/.tmux.conf Note:=\u0026gt; .tmux.conf file is a hidden file and doesn\u0026rsquo;t show up in file explorers or directory listing by default. In this file we can do everthing from:\n Defining new key shortcuts Setting up a default environment with multiple windows, panes and running programs.  Installation Fortunately!, installing tmux is pretty straightforward on most distribution. If you use a Unix/Linux based system, you can find it via your usual packaeg manager.\n Arch Linux : sudo pacman -S tmux Ubuntu / Debian: sudo apt-get install tmux Fedora / CentOs: sudo dnf install tmux Mac OS: brew install tmux.   Starting Your First Session. For your first session simply start tmux with a new session.\ntmux The command Prefix. Since our command-line programs run inside tmux, we need a way to tell tmux that the command we\u0026rsquo;re typing is for tmux and not for the underlying application. The Ctrl-b is combination for that. This combination is called command prefix.\nFor my current setup it was hard to type CtrL-b so i remap the prefix to Ctrl-space using the command below.\nset -g prefix C-n You will need to press the prefix first each time you want to do something with tmux. Since the prefix involves the Ctrl key we need to ensure this key is easily accessible.\n Remapping the caps lock key.  On many keyboards, the Caps lock key sits right next to the a key on the home row of the keyboard. By remapping this key to Ctrl, you can make triggering commands more comforbable.\nCheckout my CapsLock remaps here  Tmux Visual appearance This will create a new tmux session with a nice all-green status bar at the bottom. tmux provides quite a few ways to customize your environment\u0026rsquo;s appearance. In this section, we\u0026rsquo;ll walk throught configuraing some to these options , as we customize the status line and other componets.\nConfiguring color To get the best visual experience out of tmux , make sure that both your terminal and tmux are configured for 256 colors. You can perform a quick check using the tput command.\n1 2  $ tput colors 256   if you don\u0026rsquo;t see 256 as a result, you\u0026rsquo;ll need to do a little configuration. You may need to configure your terminal to use xterm\u0026rsquo;s 256 mode.\nEnsure that your terminal emulator supports displaying UTF-8 characters so that visual elements such as the pane divider appear as dashed lines.\nTo make tmux display things in 256 colors, add this line to our .tmux.conf file:\n1 2  # Set the default terminal mode to 256color mode set -g default-terminal \u0026#34;screen-256color\u0026#34;   Once the right color mode is set, you\u0026rsquo;ll find it much easier to use programs such as Vim, Emacs, and other full-color programs from with tmux, especially when you are using more complex color schemes for syntax highlighting.\nChanging Colors You can change the colors of several parts of the tmux interface, including the status line, window list, message area, and even the pane borders.\ntmux provides variables you can use to specify colors.\nChanging the status Line Colors and content The default status line has black text on a bright green background. It\u0026rsquo;s pretty bland, and depending on your terminal configuration, it can be hard to read.\nThis configuration will give you a status line just like mine below.\n1 2 3 4  set-option -g status-justify right set-option -g status-bg black # colour213 # pink set-option -g status-left \u0026#39;#[fg=magenta]» #[fg=blue,bold]#T#[default]\u0026#39; set-option -g status-right \u0026#39;#[fg=red,bold][[#(git branch) ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d \u0026#39;,\u0026#39; -f 2)#[default]\u0026#39;   My current status bar looks like the following.\nKeeping Status Line Info Up to Date We can specify exactly how quickly tmux refreshes its status line with . By default tmux refresh interval in every 15 seconds.\n1 2  # update the status line every sixty seconds set -g status-interval 6   Managing tmux sessions. Here are the most useful tmux commands to manage your sessions.\n tmux list-sessions - List tmux sessions. tmux new-session -s hello - Create a new sessions named \u0026ldquo;hello\u0026rdquo; tmux kill-session -t hello - Kill the session named \u0026ldquo;hello\u0026rdquo; tmux kill-server - Kill the tmux server and, as a result, every session.   If you use a tool to automate the creation of your sessions like tmuxp, you will barely need to use these commands. More on that later!.\nReloading tmux config Files Each time you change your config file, you need to reload it in tmux to apply the changes.\nLet\u0026rsquo;s set a keystroke to reload the config files easily:\n1 2  # Reload the file with Prefix r bind r source-file ~/.config/tmux/tmux.conf\t\\; display \u0026#34;Conf Reloaded!\u0026#34;   Here , we have two commands combined into one, on the second line:\n We bind the key r to reload the config file. We display a message when we hit prefix -\u0026gt; r.  Let\u0026rsquo;s stop tmux by typing exit. Then, run tmux again and, if you hit prefix key -\u0026gt; r you\u0026rsquo;ll normally see the message Reloaded ~/.tmux.conf displayed at the bottom of your tmux session.\nFrom now on, each time you want to see the effect of your configuration changes, you need to reload the config file.\nMouse Mode. What? A mouse in a mouseless environment?\nWell, using the mouse is sometimes practical, escpecially since you might use it in other software, like your browser.\nEnabling the mouse allows you to use it for:\n Selection Panes. Selection windows (via the status line) Resizing panes. Scrolling windows. Copying text   Let\u0026rsquo;s add it in the configuration:\n1  set -g mouse on   You can do everything with your keyboard too, and I encourage you to do so.\nSplitting Panes One of the most common operation you\u0026rsquo;ll do in tmux is splitting a window into multiples panes. Lets add some useful keystrokes in our config:\n1 2 3  # Splitting windows bind v split-window -h -c \u0026#34;#{pane_current_path}\u0026#34; bind h split-window -v -c \u0026#34;#{pane_current_path}\u0026#34;   You might think that something is reversed her, between my keystroke v (for vertical) and tmux flag -h (for horizontal).\nThe flag -c execute a shell command, and #{pane_current_path} simply bring you back where you were in the filesystem.\nNavigating Panes To navigate from panes to pane, you can use prefix -\u0026gt; arrow key by default. However, this action is so common i like to use the following.\n1 2 3 4  bind -n C-h select-pane -L bind -n C-j select-pane -D bind -n C-k select-pane -U bind -n C-l select-pane -R   The flag -n means that thes bindings don\u0026rsquo;t use the prefix key.\nWhy using ctrl+hnei? it\u0026rsquo;s alwayse better to keep your fingers on the home row keys. Using the arrow keys force you to move your hands. If you stop doing it, you\u0026rsquo;ll understand how comfortable it is.\nMore History! MORE! One of the functionality I love in tmux is being able to have thousands of lines from the terminal outputs. You need to add the following to your config file:\nWindows. We know how to split the current pane, but we don\u0026rsquo;t know yet how to create new windows and how to navigate between them.\nLet\u0026rsquo;s add some more keystrokes to our config file:\n1 2 3 4 5 6  unbind n #DEFAULT KEY: Move to next window unbind w #DEFAULT KEY: change current window interactively bind n command-prompt \u0026#34;rename-window \u0026#39;%%\u0026#39;\u0026#34; bind w new-window -c \u0026#34;#{pane_current_path}\u0026#34; bind-key , command-prompt -p \u0026#39;Rename Window:\u0026#39; \u0026#39;rename-window \u0026#34;%%\u0026#34;\u0026#39;   The keystroke prefix key -\u0026gt; w will create a new window, and prefix key -\u0026gt; n will allow you to rename the current window.\nYou can see some tabs in the status line, at the bottom left of your tmux session. Each tab represents one window.\nWhen you have more than one window, you can then select them with prefix key -\u0026gt; . is the window number you want to display.\nYou can see that a little star in the windows tab indicate what window is currently displayed in your terminal. If you think that it\u0026rsquo;s not really readable, no worries: we will improve the status bar later.\nTo stay consitent, let\u0026rsquo;s do the same with the panes by adding n the config:\n1 2  set -g base-index 1 set-window-option -g pane-base-index 1   You might thike it\u0026rsquo;s annoyong do do prefix key -\u0026gt;  since you\u0026rsquo;ll navigate between windows often. I like to use alt+k to go to the next window, and alt+j to go to the previous one, without using the prefix key:\nCopy Mode Let\u0026rsquo;s speak briefly about tmux modes. There are two of them:\n The default mode The copy mode   We actually use the default mode of tmux. You can think of it as the equivalent of the Insert mode in Vim. It allows you to type whatever you want in the different panes.\nWhen you are in copy mode, you have the possibility to navigate in your terminal, using Emacs or VI key bindings. Since I\u0026rsquo;m in love with Vi/Vim, let\u0026rsquo;s add in the config.\n1  set -g mode-keys vi   Now, let try the copy Mode! Hit prefix key -\u0026gt; space. You can come back to the default mode by hitting q.\nYou can see that you\u0026rsquo;re in copy mode thanks to the two number on the top right corner of your panes. They represent the total number of lne which are below the visible output (on the left) and the one which are above (on the right).\nFrom there, you can use the vanilla vim keystrokes to navigate your current terminal output. Again, I wrote about the basic Vim keystrokes in this article.\nYou can use, for example:\n ctrl-u - Scroll up. ctrl-d - Scroll down. / - search   Exactly like in Vim !.\nUnsuprisingly , you will use copy mode mainly to copy content. I you tried to copy terminal outputs already from tmux with your mouse, you might be confused: it doesn\u0026rsquo;t reall work.\nIndeed, tmux by default doesn\u0026rsquo;t copy anything in your sytem clipboard, but it one of its paste buffer. However, for convinience, I prefer using the sytem clipboard each time I copy something.\nLet\u0026rsquo;s configur that now:\n1 2 3 4 5 6 7  # KEY BINDINGS -VI COPY MODE # More vim-like unbind -T copy-mode-vi Enter; #Default for copy-selection bind -T copy-mode-vi Space send-keys -X begin-selection bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \u0026#34;xsel --clipboard\u0026#34; # colemak keys   To stay consistent with Vim\u0026rsquo;s default keybindings, we did the following.\n Changing the keystroke to select text from space to v. Changing the keystroke to copy text from enter to y.  Then, we pipe the action to xsel, to copy the selection to the system clipboard. If you don\u0026rsquo;t have xsel installed or if you prefer using xclip, you can replace the last line in your configuration with this one:\n1  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \u0026#34;xclip -i -f -selection primary | xclip -i -selection clipboard\u0026#34;`   xsel or xclip will work well on Linux systems. Be awaer as well that you can paste what\u0026rsquo;s n the tmux paste-buffer by using prefix key -\u0026gt; p if you don\u0026rsquo;t want to use the system clipboard.\nNow copy pasting in tmux will normally work like a charm. You can as well copy using the mouse: selcet what you want and enter y without releasing the mouse button. If you release it, the selection will disappear before you had the chance to copy it.\nIntegrate Your tmux with Vim. There are some more configuration you need in order for tmux to work seemingly with vim . If you don\u0026rsquo;t use vim, you can pass this section.\nFirst, if you use Neovim in tmux. you might experience a cursor proble: It doesn\u0026rsquo;t change from rectangle to pipe when you go from Normal Mode to Insert Mode.\nAdding this line in your configuration might help:\n1  set -g -a terminal-overrides \u0026#39;,*:Ss=\\E[%p1%d q:Se=\\E[2 q\u0026#39;   Another improvement you might want: navigating between tmux panes and vim window using the same keystrokes, ctrl+hnei.\nThis config will do exactly that:\nThat\u0026rsquo;s all!\nNow you have a personalized tmux configuration you can modify to fit your precise needs. There are alot of tmux configuration available out there, if you need some inspiration.\nYou might think that it will take you forever to remember these keystrokes, but I believe they are overall pretty logical. Moreover, if you have written your own cheatsheet, I bet you know most of them already.\nEnhancing tmux with plugings Event if we have now a very powerful tool, we can improve tmux evem more by addng some useful plugins.\ntmux plugin manager To manage our tmux plugins, we need the tmux plugin manager\nTo install it, follow these steps:\n Clone the project into your home directory: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm Add this line in the configuration: set -g @plugin \u0026lsquo;tmux-plugins/tpm\u0026rsquo; Add this at the end of tmux’s configuration: run -b \u0026lsquo;~/.tmux/plugins/tpm/tpm   You can add any plugins you want in your config and install them with *prefix -\u0026gt; I, after reloading the config.\nA Better search with copycat. As we saw, tmux copy mode allow you to search in the output of the current pane. Howeevr, if you want advanced search capabilities , you can try tmux copycat.\nWhat are the cool benefilts , you might ask?\n You don\u0026rsquo;t neet to be in copy mode to search something. You can search using regex or plain strings. You have access to keystrokes to select filepathis, git status output, urls, and IP addresses to copy them easily. Your search is automatically selected. YOu can copy it using yank (the y key we configured earlier) directly.   Like in Vim, you an use n and N to jump to the next or previous result, repectively.\nFuzzy Search with fzf And Extrakto. You\u0026rsquo;ll need fzf to use this plugn. If you don\u0026rsquo;t haev it already, I advice you to install it: it\u0026rsquo;s a powerful tool which will enhance your terminal experiencee even more!.\nIn order to install extrackto, add the following to your config file:\n1  set -g @plugin \u0026#39;laktak/extrakto\u0026#39;   Then, reload it and hit prefix key -\u0026gt; I to install the new plugin.\nAutomating the creating of tmux sessions. The power of tmux doen\u0026rsquo;t stop here. There are many tools out there which allow you to automate tmux sessions creation via YAML (or JSON) config files.\nYou can automate everything, from the number of windows and panes you want to , to the command lines to execute in which pane.\nThe two most know tools to create sessions from config files are tmuxinator and tmuxp.\nTo see all my tmux configuration. Checkout my github tmux configuration. This is always up to date.\nI want to work with Tmux in all my sessions I use zsh as my default shell. Adding the following in the .zshrc to start tmux at terminal startup.\n1 2 3 4 5  if which tmux 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null; then if [ $TERM != \u0026#34;screen-256color\u0026#34; ] \u0026amp;\u0026amp; [ $TERM != \u0026#34;screen\u0026#34; ]; then tmux attach -t hack || tmux new -s hack; exit fi fi   Always work in a tmux session if tmux is installed\n","description":"Tmux is a terminal multiplexer, which means it will allow you to easily swith betwween several programs in one terminal, and it especially handy when dealing with complex project that require multiple terminal","id":7,"section":"workshops","tags":["linux","CommandLine","Tmux","Productivity"],"title":"Tmux Workshop","uri":"https://eduuh.codes/workshops/tmux/tmux/"},{"content":"Advanced Git WorkShop Hello am Edd and I will be taking you through this workshop.By the end of this workshop, if you follow along you have a completely different understanding of Git and how you work with it.\nHow we will go along I will start will a short demo on the command line to introduce the new material.\nAfter a bit we will have some exercise for you to practise what we were going through. After you finish the exercises we are\nthen going to it together, to make sure you understand.\nRequirements  Command Line that support unix style commands git version \u0026gt; 2.0 (check with git \u0026ndash;version) github.com account This Repository 👇  1  git clone git@github.com:eduuh/Advanced-GitWorkshop.git   Are we all good at these requirements. Okay Let get into it.\nI know when we learn git we memorize 6 command the rest of git is usually a black box that we don\u0026rsquo;t explore. We reach at a point where we really on the GUI tool available for working with git. I.e visual studio code.Today we are going to go a lot deeper to git away from this basic commands and explore git further.\nMy \u0026ldquo;assumption\u0026rdquo; is you are familiar with this commands. Don\u0026rsquo;t worry if you are a beginner you will get into pace soon.\n   Command Action     git clone clone a remote repository : github, gitlab , azure repos   git push Push local repository to remote service   git fetch Pull changes to a local repository   git pull -f git fetch + git merge (used flags right)   git init Initialize a repository locally   git add \u0026amp; git commit Add changes to a local repository.    If you are not famialiar with the above commands. Please bare with me, this are usually common concept that we can\u0026rsquo;t do without them. When we come across them i will explain to you what they do.\nI felt this way untill i decided its time to level up a little bit and come out of my confort zone. Using GUI tools. In my case visual studio code.\nDo you feel this way?\nIts a sad place to be. Are you exited to not do this anymore!?\nI will try to get you out of this showing you how to use git the right way.\nBefore you delete you could decide to look up some manual page for git online and this is what you might get.\nWAT?\nThe SYNOPSIS WTH does it mean??\n git refers to its self as A stupid content tracker funny\nBut this depends on how your use case and mood.\n  Notes  People use git for different use cases. You should try to use the idea from this workshop and incoporate them to your workflows.\n   I have divided this workshop into sections , and after each sections. Am going to give an exercise which you will attempt. And then we are going to them together.\nLets focus more on doing and understanding the theory. This is what i mean. Instead of writing down the notes focus on trying out the commands. You have all these notes with you.\nGit is a tool to helps you,but not work against you.\nGit concepts  Untracked Files  New files that git have not requested to track previously.\n Working Area  Worked that is tracked by git that has been modified but have not yet been commited.\n Staging Area  Modified files that have been marked to go the next commit.\nThis are terms that will appear mostly in this workshop.\nHow is information stored. At its core, git is like a key value store.\n Value = Data (our files) Key =\u0026gt; Sha1 Key   Key  Its a crytographic hash function. Given a piece of data , it produces a 40 - digit hexadecimal numbers. You will see this in a bit.\nThis value should always be the same if the given Input it the same.\n Value  Git store the compressed data in a blob , along with the metadata in a header. Holds the identifier of the, size of the content and the content itself.\nNote: The content is compressed and when you cat into it you will get a whole lot of nothings.\nUnder the Hood - Lets create a git hash object. Git will take our content and use it to generate the hash key. For now we could supply some content to git using echo command.\nIf you run the command. Here we are piping the output of the echo command to the git hash function requesting to use the stdin\nThe hash function returns the a hash which should be the same for all of us.your can try this\n1 2  echo hello | git hash-object --stdin # ce013625030ba8dba906f756967f9e9ca394464a   We already know some tools that are used to generate sha1 keys. For my system I believe its openssl\nlets generate Sha1 using openssl\n1 2  echo hello | openssl sha1 # (stdin)= f572d396fae9206628714fb2ce00f72e94f2258f   Thes hash are different. This is because git hash function **prepends thes string \u0026ldquo;blob\u0026rdquo; followed by the file size and a null to the file\u0026rsquo;s content before hashing.\nThis is how git calculates the sha1 for the file (in git term a blob)\nGit calculate the files metadata + content , not just the content.\n1  # sha1(\u0026#34;blob\u0026#34; + filesize + \u0026#34;\\0\u0026#34; + data) # not \\0 is a null byte   When you run the hash function on the same content you will always get the same result.\nLets initialize a repository 1 2  git init # Initialized empty Git repository in $HOME/username/dir/.git/   The initialized repository is store at .git directory.\nWhey you delete this folder in a repository you actually blow up the repository, but you retains the files that were availble in the working area.\n question: where are blob stored?  We are going to rerun the command that ask git to generate a sha1 key for the content but this time we pass a option , -w that indicates we want to write the object to the git repo.\n1 2  echo hello | git hash-object -w --stdin ce013625030ba8dba906f756967f9e9ca394464a   Take a note at the hash generated at this point. and lets access how it is saved in the git folder.\n lets do some clean up first\n Remove the hooks directory in the repository, so that it does not get into our way.\n1  rm -rf .git/hooks # r =\u0026gt; recusive f =\u0026gt; folders   Now you can tree into the .git folder to pic at all the content.\nNote if you have alot of files in your working directory u are going to have a longer structure. ***The output look something like.\n1  tree .git/   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  .git/ ├── branches ├── config ├── description ├── HEAD ├── index ├── info │ └── exclude ├── logs │ ├── HEAD │ └── refs │ ├── heads │ │ └── master │ └── remotes │ └── origin │ └── HEAD ├── objects │ ├── 07 │ │ └── 9830d5ae8de34a3faf6bd8ff8b680684948bec │ ├── ce │ │ └── 013625030ba8dba906f756967f9e9ca394464a   Our initial sha1 file was ce013625030ba8dba906f756967f9e9ca394464a.\nwhat do you notice?  Our blob is stored in the object folder. You can\u0026rsquo;t see that yet but you will.  2 Inside a subfolder which picks the first two char of the blob (ce)\n3.The blob object as the rest of the char (013625030ba8dba906f756967f9e9ca394464a)\nDo this Step by step  Create an empty directory and initialize a new repository  Copy the command as it will work.\n mkdir makes a directory. cd move into the directory git init initiaze the repository  1  mkdir test ; cd test ; git init   One you initialize a repository a .git folder is created where all git information is stored.\nThe .git folder have a few empty directories. If you have never checked the .git directory lets start now.\nCheck the folder structure of the .git directory.  1  ls -la .git   drwxr-xr-x 7 edd eduuh 4096 Feb 15 19:45 ./ drwxr-xr-x 3 edd eduuh 4096 Feb 15 19:45 ../ drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 branches/ -rw-r--r-- 1 edd eduuh 92 Feb 15 19:45 config -rw-r--r-- 1 edd eduuh 73 Feb 15 19:45 description -rw-r--r-- 1 edd eduuh 23 Feb 15 19:45 HEAD drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 hooks/ drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 info/ drwxr-xr-x 4 edd eduuh 4096 Feb 15 19:45 objects/ drwxr-xr-x 4 edd eduuh 4096 Feb 15 19:45 refs/ Remove the .git/hooks folder. you dont need for now  1  rm -rf `.git/hooks`   Look at the folder structure in a graphical way using the tree command.  1  tree .git/   Lets add a file in our repository. Using the echo command you can redirect the output to a file.  1 2 3 4 5 6 7 8  # will write the line ot gitstuff.txt file echo \u0026#39;an awesome guide to git\u0026#39; \u0026gt; gitstuff.txt # you can check the content of the file using cat command cat gitstuff.txt git hash-object -w gitstuff.txt # 24997081c3c51eeac9df4309dbcc9452112a8f1f   You should the same hash code as i get here as long us you use the same content as i did.\nThis time the git hash function command takes a path to a file unlike intially where echo was used to input to the stdin of the function\nSomething i realize with the ls -la command that actually the blob is a file. We can just read from it since it compressed into a c binary file. Lets try fo fun  lets us the find command to look for all files. Since we now know the blob are store in the object we could narrow our search in directory.\n1 2  find .git/object/ --type f # .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f   We\u0026rsquo;ve created our first object! this is a binary file that holds what we just saved.\nNote The object id is choosen based on the content of the object. This is how git stores our object. Let me use the right word here content-addressable filesystem.\nLets try to save the same file again.  1  git hash-object -w gitstuff.txt   Because it the same content, nothing changes we will receive the same sha1 hash key\n Question: How can we see the content of the blob??   When you cat pathtofile you will get a whole lot of nothing.To be more accurate a binary output\nLets try\n1 2 3 4 5 6  # use the find command to get the path find .git/objects -type f # .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f cat .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f # xK��OR02aH�SH,O-��MUH/�LIU(�WH�,���   Git provides a functions to view the content of blobs.cat-file\n -p =\u0026gt; print out pretty print -t =\u0026gt; print out the type  For this command you use the sha1 hash as the arguement.\n1 2 3 4 5  git cat-file -p 24997081 # an awesome guide to git git cat-file -t 24997081 # blob   Useful commands    command detail     kkdir  creates a directory   git init initialize git in the directory   ls -la .git lists the content of the .git directory   find .git/object/ -type -f list all files available in a directory   git hash-object -w  Saves the files to a git object store.   **git cat-file -p  pretty print the content of the object in the git object store.    This takes you to exercise one\nWe need other stuff, right? Our blob is missing information.\n filenames. directory structure.  wheres is this information stored in git?\n Tree  Git stores filename , directory structure here.\na tree contains pointers (using sha1).\n to blobs.\nto other trees.\n and metadata\n type of pointer filename of directory name mode (excutable file, symbolic link,..)  Has anyone ever tried to add empty directories to git?\ngit can\u0026rsquo;t of dont store empty directories.\nIdentical content is only store once.\nOther Optimization - Packfilse and Deltas  Git object are compressed As files change, their content remains mostly similar. Git optimize for this by compressing these files together, into a Packfiles. The packfile stores the object and deltas , of the differences between one version of the file\nand the next. Packfiles are generated when:\nYou have too many objects , during gc, or during a push to remote.  You kind start to understand what happens during a git push where you see that message.\n compressing deltas\n Commit OBJECT A commit is a code snapshot.\nA commit points to\n A tree  and contains metadata:\n author and committer\ndate\nmessage\nparend commit (one or more)\n The sha1 of the commit is the hash of all this information.\nPractically   lets perfom a git status on the repo we created.\n $ git status On branch master No commits yet Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) learn-copy.txt learn.txt $ git add . # add all the files to the staging area $ git commit -m \u0026quot;finished working on gitworkshop\u0026quot; [master (root-commit) 3cb087a] finished working on git workshop 2 files changed, 4 insertions(+) create mode 100644 learn-copy.txt create mode 100644 learn.txt $ tree .git/objects .git/objects/ ├── 1e │ └── 234f233918794921501400511445247278c890 ├── 3c │ └── b087a3be11296eee71a0527dfe77a139688d68    Note after a commit, git provide the first character of the sha1 hash identifier for the commit. for this case its 3cb087a .\nWhen you look into the .git/objects directory using the tree\ncommand. you notice that the commit create a folder structure and has an object in it.\nGit-file -T (Type) and -P (PRINT) THE CONTENT  $ git cat-file -t 3cb087a commit $ git cat-file -p 3cb087a tree 1e234f233918794921501400511445247278c890 author eduuh \u0026lt;edwinkamaumuraya0@outlook.com\u0026gt; 1581803358 +0300 committer eduuh \u0026lt;edwinkamaumuraya0@outlook.com\u0026gt; 1581803358 +0300 finished working on git workshop  Take away from this  We can\u0026rsquo;t change the Commits!\n   if you change any data about the commit, the\ncommit will have a new SHA1 hash.\n  even ef the files dont change the date will .\n  This give use the sense of high security in git and you will always know that you commit history will always maintaint its integrity. No one in your team can mess with your commit message without becoming obvious.\nIt also secures agaish corruption. If files on the disk change, the repository will notify that the content do not match.\nREFERENCES - POINTERS TO COMMITS  tags\nbranch\nHEAD -\u0026gt; a pointer to the current commit.\n Why are checkout in git really fast? This is because, it not pulling in other data. but its just changing the pointers.\nThree areas where code lives  Working area Staging area Repository  Working area The files in your working area that are also not in the staging area are not handled by git.\nAlso called untracked files\nThe staging area  What files are going to be part of your next commit. the staging area is how git knows what will change between the current commit and the next commit.  Tip: a clean staging area isn\u0026rsquo;t empty!\nconsider the baseline staging are as being an exact copy of the latest commit.\nThe Repository The files git knows about !\nContans all of your commit.\nthe repository is stored in the .git folder.\nMoving files in \u0026amp; of the staging area Add a file to the next commit.\ngit add \u0026lt;filename\u0026gt;  delete a file in the next commit\ngit rm \u0026lt;file\u0026gt;  rename a file in the next commit:\ngit mv \u0026lt;file\u0026gt;  Git ADD -p  One of my favorite tools  allows you to stage commits in hunks\nInteractively\nIt\u0026rsquo;s especially useful if you\u0026rsquo;ve done too much work for one commit.\nUnstage files fron the staging area Not removing the files\nYou\u0026rsquo;re replacing them with a copy that\u0026rsquo;s currently in the repository.\nGit STASH This is usually a way to save uncommited work.\nThe stash is safe from destructive operations.\nchanging between branches which requires you to have commited all your changes.  Git stash Basic use Stash changes\ngit stash  list changes\ngit stash list  show content\ngit stash show stash@{0}  apply the last stash\ngit stash apply  apply specific stash\ngit stash apply stash@{0}  by default git stash stash tracked files that are either in the repository or staging area.\nAdvanced STASHING - Operations Let give a scenario. You have added a new file in the repository and you dont want to git add it yet, but you need\nto switch to a different branch. Advanced stashing comes in\nhandy. If you switch to a different branch with untracted files\nin your working area you could accidentally commit this file.\nKeeping untracted file it a stash git stash --include-untracked  you this with cautions git stash -all  this could add even ingored files.\nName stashes for easy reference git stash save \u0026quot;WIP: making progress on foo\u0026quot;  start a new brance from a stash git stash branch \u0026lt;optional branch name\u0026gt;  Grab a single files from a stash git checkout \u0026lt;stash name\u0026gt; --\u0026lt;filename\u0026gt;  Remove the last stash and applying changes git stash pop  tip : doest remove if there are a merge conflict\nRemove the last stash git stash drop stash@{0}  Remove all stashes git stash clear  Exercise ","description":"Guide to git expert","id":9,"section":"workshops","tags":["version control","Productivity","git","github"],"title":"Advanced Git WorkShop","uri":"https://eduuh.codes/workshops/git/advancedgit/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":11,"section":"gallery","tags":null,"title":"Photo","uri":"https://eduuh.codes/gallery/photo/"},{"content":"Typescript Workshop Getting Started with Typescript. Typescript compiles into javascript. javascript is what you are actually going to execute (either in the browser or server). You are going to need the following.\n * Typescript compiler. * A typescript editor.  Typescript = JavaScript + A Type system\nWe are going a vast amount of time learning about A type system.\nThe goal of the type system  Helps us catch erros during development. Uses type annotation to analyze our code. Only active during development. Doesn\u0026rsquo;t provides any performance optimization.  What happens when we write Typescript.  You and I write javascript code JavaScript with types annotations. The source code is fed into the Typscript compiler The typescript compiler emmits Plain Old Javascript The plain old Js is executed on the browser.  Summary.  Writing Typscript is the same as writing JavaScript with some \u0026lsquo;extra documentation\u0026rsquo;. Typscript has no effect on how our code gets executed by the browser or Node. It is best to think of typescript as being like a friend sitting behind you while you are coding.  Writing typescripting is like writing typescript together with a pair programmer.\nEnvironment Setup Installing the TypScript compiler. Since we are learning typescript, let make use of the nightly version.\nnpm install -g typescript@next ts-node  If you get a \u0026ldquo;EACCESS\u0026rdquo; error, add sudo infront of the command.\nWhy Typescript  provides an optional type system for javascript. Provides planned features from future javascript editions to current javascript engines  The TypeScript type system. You might be wondering \u0026ldquo;Why add types to JavaScript?\u0026rdquo;\nTypes have proven ability to enhance code quality and understandability. Large teams (Google, Microsoft, Facebook) have continually arrived at this conclusion.\n Types increase your agility when doing refactoring . It\u0026rsquo;s better for the compiler to catch errors that to have things fail at runtime. Types are one of the best form of documentation you can have. This function signature is a theorem and the function body is the proof.  However, types have a way of being unnecessarily ceremonious.\nYour JavaScript is TypeScript. Typescript provides compiler time type safety for your javascript code. This is no surprice given its name. The great thing is that the typse are completely optional. Your javascript code .js file can be renamed to ts. file and typescript will still givi you back valid .js equivalent.\nTypes can be Implicit(Not necessary specified). TypeScript will try to infer as much of the type information as it can in order to give you type safety with miniamal cost of productivity during code development.\nTypes can be explicit (specified). TypeScript will infer as much as it can safely. However, you can use annotations to:\n Help along the compiler, and more importatly document stuff for the next developre who has to read your code (that might be future you!). Enforce that what the compiler sees, is what your thought is should see. That is your understanding of the code matches an algorithmic analysis of the code.  Types errors do not prevent Javascript emit. This means that you can icrementally upgrade your javascript to Typscript. This is very different from how many other language compiler work and yet another reason to move to TypeScript.\nFuture Javascript =\u0026gt; Now Typescript provides a number of features that are planned in ES6 from current Javascript enginges(that only support ES5).\nYour Javascript is Typescript There were (and wiill continue to be ) a lot of competitor is some syntax to javascript compilers. typscript is different from them in that Your javascript is typescript.\nHowever , it does mean that you need to learn Javascript (the good news is you only need to learn javascript.) Typescript is just standardizing all the way you provide good documentation on js.\nTypeScript is just Javascript with docs.\nJSNEXT is open to interpretation - not everything proposed for the next version of JS actually makes it to browsers.\nTypscript only add support for proposals once they reach stage 3.\nYou Still need to learn javascript. That said Typescript is very pragramtic about the fact that you do write javascript so there are some things about javascript that you still need to know in order to not be caught off-guard. Let\u0026rsquo;s discuss them next.\nJavascript concept to Note. 1. Equality. One thing to be careful about in Javascript is the difference between == and ===. As javascript tries to be resilient against programing errors == tries to do type coercion between two variables e.g. converts a string to a number so that you can compare with a number.\n1 2  console.log(5 == \u0026#34;5\u0026#34;); // true , TS Error console.log(5=== \u0026#34;5\u0026#34;); // false , TS Error   The choices Javascript makes are not always ideal. For example, in the below example the first statement is false because \u0026quot;\u0026rdquo; and \u0026ldquo;0\u0026rdquo; are both strings and are clearly not equal. However, in the second case both 0 and the empty string (\u0026quot;\u0026quot;) are falsy (i.e behave like false).\n1 2 3 4 5  console.log(\u0026#34;\u0026#34; == \u0026#34;0\u0026#34;); console.log(0 == \u0026#34;\u0026#34;); console.log(\u0026#34;\u0026#34; === \u0026#34;0\u0026#34;); console.log(0 === \u0026#34;\u0026#34;);   Note that string==number and string === number are both compile time errors inTypescript, so you don\u0026rsquo;t normally need to worry about this.\nsimilar to == vs. ===, there is != vs !===\nSo proTip: Always use === and !== except for null checks, which we cover.\nStructural Equality. If you want to compare two objects for structural equality == / === are not sufficient.\n1 2  console.log({a:123} == {a:123}) //false console.log({a:123} === {a:123}) //false   To do such checks use the deep-equal npm package e.g.\n1 2  import * as deepEqual from \u0026#34;deep-equal\u0026#34;; console.log(deepEqual({a:123} == {a:123}));   However, quite commonly you don\u0026rsquo;t need deep checks and all you really need to check by some id e.g.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  type IdDisplay = { id: string, display: string } const list: IdDisplay[] = [ { id: \u0026#39;foo\u0026#39;, display: \u0026#39;Foo Select\u0026#39; }, { id: \u0026#39;bar\u0026#39;, display: \u0026#39;Bar select\u0026#39; } ] const fooIndex = list.map(i =\u0026gt; i.id).indexOf(\u0026#39;foo\u0026#39;); console.log(fooIndex);   References. Beyond literals, any Object in Javascript (including functions, array, regexp) are references. This means the following.\nMutations are across all references. 1 2 3 4 5 6 7  var foo = {}; var bar = foo; // bar is a reference var baz = {}; // baz is a *new object* distinct from \u0026#39;foo\u0026#39;  console.log(foo === bar); console.log(foo === baz);   Null and Undefined. Javascript (and extension Typscript) has two bottom types: null and undefined. They are intended to mean different things.\n Something hasn\u0026rsquo;t been initialized: undefined. Something is currently unavailable. null.  checking for either Fact is you will need to deal with botn. Intrestingly in Javascript with == , null and undefined are only equal to each.\n1 2 3 4 5 6 7 8 9  console.log(null == null); console.log(undefined == undefined); console.log(null == undefined); //You don\u0026#39;t have to worry about falsy values making through this check. console.log(0 == undefined); console.log(\u0026#39;\u0026#39; == undefined); console.log(false == undefined);   Recommend ==null to check for both undefined or null. You generally don\u0026rsquo;t want to make a distinction between the two.\n1 2 3 4  function foo(arg: string | null | undefined) { if (arg != null){ // arg must be a string as \u0026#39;!=\u0026#39; rules out both nul and undefined  }}    You could also do \u0026lsquo;==\u0026rsquo;, undefined but == null is more coventional/shorter.\n One exception root level undefined values which we discuss next.\nChecking for root level undefined. Remember how I said you should use ==null. Of course you do (cause I just said ^). Don\u0026rsquo;t use if for root level things. In strict mode if you use foo and foo is undefined you get a ReferenceError exception and the whole call stack unwinds.\n you should use strict mode.. and in fact the TS compiler will insert it for you if you use modules.. more on those later \u0026gt;\n So to check of a variable is defined or not at a global level you normally use *typeof :\n1 2 3  if (typeof somglobal !== \u0026#39;undefined\u0026#39;) { // someglobal is now safe to use.  }   Limit explict use of Undefined Because Typescript gives you the opportunity to document your structure separately from the value instead of stuff like.\n1 2 3 4 5 6  function foo(){ //if something  return {a:1, b:2}; // else  return {a:1, b:undefined} }   you should use a type annotations.\n1 2 3 4 5 6  function foo():{a:number, b?:number}{ //if something  return {a:1, b:2}; //else  return {a:1}; }   Node Style callbacks Node style callbacks functions (e.g (err, somethingElse)=\u0026gt; {/something/}) are generally called with err set to null if there isn\u0026rsquo;t an error You generally just use a truthy check for this anyways:\n1 2 3 4 5 6  fs.readFile(\u0026#39;someFile\u0026#39;, \u0026#39;utf8\u0026#39;, (err,data) ==\u0026gt; { if(err){ } else { } });   When creating your own APIs it\u0026rsquo;s okay to use null in this case for consistency. In all sincerity for your own APIs you should look at promise, n that case you actually don\u0026rsquo;t need to bother with obsent error values (you handle them with .them ) vs .catch..\nDon\u0026rsquo;t use undefined as a means of denoting validity. For example an awful functions like this:\n1 2 3  functions toInt(str: string){ return str? parseInt(str): undefined; }   Can be much better written\n1 2 3 4 5 6 7 8 9  functions toInt(str: string): {varlid: booleam, int?: number}{ const int = parseInt(str); if(isNaN(int)) { return {valid: false}; } else { return {valid: true, int}; } }   JSON and serialization. The json standard has supported for encoding null but not undefined. When JSON -encoding an object with an attribute that null., the attribute will be included with its null value, whereas an attribut with an undefined.\n1  JSON.stringify({willStay: null, willBeGone: undefined});   As a result, JSON-based databases may support null values but not undefined values. Since attributes set to null* aer encoded, you can transmit the intent to clear an attribute by setting its value to **null** before encoding and transmitting the object to a remote store.\nFinal thoughts. TypeScript team doesn\u0026rsquo;t use null: TypeScript coding guidelines. Douglas Crokford think null is a bad idea and we should all just use undefined.\nHowever, NodeJS style code bases uses null for Error arguments as standard as it denotes something is currently unavailable. I personally don\u0026rsquo;t care to distinguish between the two as most projects use libraries with differing opinions and just rule out both with ==null.\nthis. Any access to this keyword within a functions is controlled by how the function is actually called. It is commonly referred to the calling context..\nHere is an example.\n1 2 3 4 5 6 7 8  functions foo(){ console.log(this); } foo(); let bar = { foo } bar.foo();   So be mindful of your usage of this. if you want to disconnect this in a class from the calling context use an arrow functions.\nClosure. The best thing that javascript ever got was closure. A function in javascript has access to any variable defined in the outer scope. closure are best explained with examples.\n1 2 3 4 5 6 7 8 9 10  function outerFunctions(arg) { var variableInOuterFunction = arg; function bar(){ console.log(variableInOuterFunction); } bar(); } outerFunctions(\u0026#39;hello closure\u0026#39;);   Reason why it\u0026rsquo;s awesome. 1 2 3 4 5 6 7 8 9 10 11 12 13 14  function createCounter() { let val = 0; return { increment() { val++}, getVal() { return val} } } let counter = createCounter(); counter.increment(); console.log(counter.getVal()); counter.increment(); console.log(counter.getVal());   Number Here are a few critical pieces of information about numbers in Javascript that you soud be awae of .\nCore Type. JavaScript has only one number type. It is double precision 64-bits Number.\nDecimals console.log(.1 + 2);\nInterger The integer limits represent by the built in number type are Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER\nbig.js Whenever you use math of financial calculations (e.g GST calculation, money with cents, additions) use a library like big.js which is designed for.\n Perfect decimal math Safe out of bound interger values.  1 2 3 4 5 6  import { Big } from \u0026#39;big.js\u0026#39;; export const foo = new Big(\u0026#39;111.1111111111111111111111\u0026#39;); export const bar = foo.plus(new Big(\u0026#39;0.99999999999999999292929\u0026#39;)); const x:number = Number(bar.toString());    Note: Do not use this library for math used for UI/performance intensive purpose e.g charts, canvas drawing\n NaN When some number calculation is not representable by a valid number. Javascript returns a special nan value. A classic example is imaginary numbers;\n1  console.log(Math.sqrt(-1));   note: equality checks don\u0026rsquo;t work on nan values. Use Number.isNaN instead.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  console.log(Number.MAX_VALUE); console.log(-Number.MAX_VALUE) // values outside of range where precision isn\u0026#39;t changed console.log(Number.MAX_VALUE + 1 == Number.MAX_VALUE); console.log(-Number.MAX_VALUE - 1 == -Number.MAX_VALUE); // values outside range wher precision is changed resolve to special values.  console.log(Number.MAX_VALUE + 10*1000); // Infinity console.log(-Number.MAX_VALUE - 10**1000); // - Infinity // special infinity value  console.log(1/0); // infinity console.log(-1/0); // -infinity  console.log(Number.POSITIVE_INFINITY === Infinity); console.log(Number.NEGATIVE_INFINITY === -Infinity ); console.log(Infinity \u0026gt; 1); console.log(-Infinity \u0026lt; -1);   Infinitesimal The smallest not-zero value representable in Number is available as a static Number.MIN_VALUE\nconsole.log(Number.MIN_VALUE);\nValues smaller that MIN_VALUE (\u0026ldquo;underflow values\u0026rdquo;) are converted to 0.\nconsole.log(Number.MIN_VALUE / 10) //0\nTruthy Javascript has a concept of truthy things that evaluate like true would in certain position (e.g if condition and the boolean \u0026amp;\u0026amp; || operator). The following things are truthin.\n1 2 3  if (123) { // will be treated like \u0026#39;true\u0026#39;  console.log(\u0026#39;any number other than 0 is truthy\u0026#39;); }   Something that isn\u0026rsquo;t truthy is called falsy\nHere\u0026rsquo;s handy table for your reference.\n   Variable Types When it is falsy When it is truthy     boolean false true   string \u0026lsquo;'(empty string) any other string   number always never   undefined always never   {}, [] never always    Being explicit.  The !! pattern\nQuite commonly it help to be explicit that the intent is to treat the value as a boolean and convert it into a true boolean true | false. You can easily convert value to a true boolean by prefixing it with !! e.g !!foo.\n It is common to use this pattern in lots of places e.g\n1 2 3 4 5 6 7  const hasName = !!name; const someObj = { hasName: !!name } {!!someName \u0026amp;\u0026amp; \u0026lt;div\u0026gt;{someName}\u0026lt;/div\u0026gt;}   Future Javascript : Now One of the main selling poing of TypeScript is that it allows you to use a bunch of features from ES6 and beyond in current (ES3 and ES5 level) javascript engines(like current browser and Node.js)\nClasses. The reason why it\u0026rsquo;s important to have classes in Javascript as a first class item is that.\n classes offer a useful structure abstraction. Provides a consistent way to developers to use classes instead of every framework (emberjs, reactjs etc) cominp up with their own version. Object Oriented Developer already understanding classes.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class Point { x: number; y: number; constructor(x:number, y:number){ this.x=x; this.y=y; } add(point: Point){ return new Point(this.x + point.x, this.y + point.y ); } } var p1 = new Point(0, 10); var p2 = new Point(10, 20); var p3 = p1.add(p2); // Inheritance  class Point3D extends Point { z: number; constructor(x:number, y:number, z:number){ super(x,y); this.z = z; } add(point: Point3D) { var point2D = super.add(point); return new Point3D(point2D.x, point2D.y, this.z +point.z); } }   static TypeScript classe support static properties that are shared by all instances of the class. A natual place to put (and access them in on the class itself and that is what TypeScript) does.\n1 2 3 4 5 6 7 8 9 10  class Something { static instances = 0; constructor() { something.instances++; } } var s1 = new Something(); var s2 = new Something(); console.log(something.instances);   Access Modifiers. TypeScript support access modifiers public, private and protected which determine the accessibility of a clas as shown.\n   accesible on public protected private     class yes yes yes   class children yes yes no   class instance yes no no    If an access modifier is not specified it is implicitly public as that matches the convenient nature of JavaScript.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class FooBase { public x: number; private y: number; protected z: number; } //effect on Instances var foo = new FooBase(); foo.x; //okay foo.y; //ERROR : private foo.z; // Error : protected.  // EFFECT ON CHILD CLASSES class FooChild extend FooBase { constructor(){ super(); this.x; //okay  this.y; // Error: private  this.z; // Okay  }}   Abstract. abstract can be thought as an acces modifier. We present it separately because opposed to the previously mentioned modifiers it can be on a class as well as any members of the class. Having an abstract modifier primarily means that such functionality cannot be directly invoked and a child class must provide the functionality.\n Abstract classe cannot be directly instantiated. Instead the user must create some class that inherits from the abstract class  What\u0026rsquo;s Up with the IIFE Immediately-Invoked Function Expression (IIFE).\n1 2 3 4  (function (){ // BODY  return Point; })()   hast to do with inheritance. It allows TypeScript to capture the base as a variable _super e.g\nNotice that the IIFE allows TypeScript to easily capture the base class point in a _super variable and that is used consitently in the class body.\n_extends You will notice that as soon as you inherit a class TypeScript also generate the following functions.\nHere d refers to the derived class and b refers to the base class. This function does two things.\nArrow Functions. lovingly called the fat arrow (because -\u0026gt; is a thin arrow and =\u0026gt; if a fat arrow) and also called a labda function (because of other language.)\nAnother commonly used feature is the fat arrow function ()=\u0026gt;someting.The motivation for a fat arrow.\n You don\u0026rsquo;t need to keep typing function. It lexically capture the meaning of this. It lexically capture the meaning of arguments  Tip: Arrow Function Need Beyond the terse syntax, you only need use the fat arrow if you are going to give the function to someone eles to call.\nEffectively:\nClass in ts to Js When you create a class in Typescript like the following.\n1 2 3 4 5 6 7  class Foo { members = []; firstname:string; lastname:string; add(x){this.members.push(x)} constructor(public x:number){} }   1 2 3 4 5 6 7 8  var Foo = /** @class */ (function () { function Foo(x) { this.x = x; this.members = []; } Foo.prototype.add = function (x) { this.members.push(x); }; return Foo; }());   The above class leads to creation of a fuction with returns a fuction with local variables.\nProperty initializer Tis is a nifty feature supported by typescript from ES7 actually. You can initialize any member of the class outside a constructor, useful to provide default (notice members=[])\nWhat\u0026rsquo;s up with the IIFE The js generated for the class could have been:\n1 2 3 4 5 6 7  function Point(x,y) { this.x = x; this.y = y; } Point.prototype.add = function (point) { return new Point(this.x + point.x, this.y + point.y); }   The reson it\u0026rsquo;s wrapped in an Immediately-Invoked Function Expression (IIFE) i.e\n1 2 3 4  (function(){ // BODY  return Point; })   ","description":"","id":12,"section":"workshops","tags":null,"title":"","uri":"https://eduuh.codes/workshops/typescript/typescript/"}]