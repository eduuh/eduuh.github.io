[{"content":"A simpler way to manage your dotfiles Hello am edd I have been having trouble with configuration since i started using docker for my development.\nFor consistecy and time saving , i decided it would be great to manage my dotfiles using git and github and when creating new enviroments.\nI wrote the solution in this post, for easy reference if i need to in the future.\nWhat a dotfile Dotfile are file in the linux system that starts with a period. They are\nmainly used to store configuration files for the User instance for various\napplications. For me the dotfiles that i would love to manage are as\nfollow.\n .bashrc or .zshrc (dependent on the shell your using.) .vimrc .setup.sh  Yes setup.sh this is a custom setup script that i maintain to initially setup a new installation with all the setting and softwares i need in my\nsystem.Could be used to\n setup the configuration files managed by the git repository. Setup my keyboard mapping to the way a need them to be .  The keyboard mapping i love most, and spend alot of time setting it up\nis `Remapping caps lock to act as a control key when pressed together wi with other character, and behave as Escape when pressed alone.\nI would love to automate the process , so that i dont even think about it.\nLike most folks, I use git to manage my dotfiles. This lets me have a\nversioned backup for my configurations, and if something breaks (and it\noften does) I can revert to a working configuration fairly easily. I came across a post of how to manage the dotfiles without the need for any\nsymlinking.\nThe key idea is really simple: make $HOME the git work-tree. The normal way of doing this would be to do a git init in you $HOME, but that\nwould totally mess up git commands if you have other repositories in your\n$HOME (also, you probably don\u0026rsquo;t want your entire $HOME in a git repository.\nWe will create a dummy folder and initialize a bare repository.Essentially\na git repo with no working directory) in there. All git commands will be run with our dummy as the git directory, but $HOME as the work directory.\nFirst Time Setup Setting this method up the first time is really easy. First, let\u0026rsquo;s create\nour bare repository. I chose to name my placeholder .dotfiles\n1 2  mkdir $HOME/.dotfiles git init --bare $HOME/.dotfiles   Now for fun part. We will make an alias for running git commands in our\n.dotfiles repository. I\u0026rsquo;m calling my alias dotfiles: .Make sure you reference the right dotfiles\nfolder in you home folder.\n1  alias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39;   Add this alias to your .bashrc. From now any git operation you would like to do in the .dotfiles repository can be done by the dotfiles alias. The\ncool thing is that you can run dotfiles from anywhere.\nLets add a remote and also set status now to show untracked files.\n1 2  dotfiles config --local status.showUntrackedFiles no dotfiles remote add origin https://github.com/eduuh/dotfiles.git   Setting Up a New Machine To set up a new machine to use your version controlled config files, all\nyou need to do is to clone the repository on your new machine telling git that it is a bare repository:\n1  git clone --separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git   However, some programs create default config files, so this might fail if git finds an existing config file in your $HOME. In that case a simple sol is to clone to a temporayry directory and then delete it once you are done:\n1  git clone --separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git   So this might fail if git finds an existing config file in your $HOME. In that case, a simple solution is to clone to a temporary directory , and then delete it once you are done:\n1 2 3 4  $ git clone --separate-git-dir=$HOME/.dotfiles https://github.com/eduuh/dotfiles.git --recursive --verbose --exclude \u0026#39;.git\u0026#39; tmpdotfiles/ $HOME/ $ rm -r tmpdotfiles   The last step is to add the dotfile alias in your bashrc or zshrc according to the shell you are\nusing.\n1  $ alias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39;c   Using the dotfiles alias For the Dotfiles repository, Your will use dotfiles instead of git. Use it as you normally use git\ncommands.\nExample of some Commands:\nA commit command.\n1 2 3 4 5  $ dotfiles commit -m \u0026#34;zshrc =\u0026gt; zsh oh my god configuration files \u0026#34; [master 64a553b] zshrc =\u0026gt; zsh oh my god configuration files 1 file changed, 91 insertions(+) create mode 100644 .zshrc   A push action.\n1 2 3 4 5 6 7 8 9  $ dotfiles push Enumerating objects: 4, done. Counting objects: 100% (4/4), done. Delta compression using up to 4 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 1.45 KiB | 1.45 MiB/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/eduuh/dotfiles.git 7d507e7..64a553b master -\u0026gt; master   The repository will be downloaded but there might exist some configuration files in your home\ndirectory to make sure you are using the right configuration file use git checkout to actually copy\nthe copy in your repository to the working directory.\n1  dotfiles checkout $HOME/.bashrc   Or easy is to checkout to the latest commit. Remember Head points to the latest commit use that.\n1 2  dotfiles reset --hard HEAD HEAD is now at 64a553b zshrc =\u0026gt; zsh oh my god configuration files   64a553b at this time this is my latest commit.\nDo not worry git reset --hard copied files available in your repository to both the staging area and the working area . It should not mess with your untracted files which i believe they are\nmany, since this is a repository monitoring the $HOME directory.\nThere you go. No symlink mess.\nMy dotfiles are here for reference.\n","description":"Efficient way to manage configuration files in a linux system.","id":2,"section":"posts","tags":["productivity",""],"title":"Managing Dotfiles Like a Pro","uri":"https://eduuh.github.io/posts/mngdotfilelikeapro/"},{"content":"Javascript deep dive tutorial This note are inspired by KYLE SIMPSON javascrip book series. I like how the ideas in the book are shared.\nI have being doing c# for the backend and to complete my journey for becoming a full stack developer.\nI needed to do alot of javascript, so immediately i started using typescript for my web development and i would say the experience with typescript is supper great. I was reading up on \u0026lsquo;react\u0026rsquo; and realized the documentation is not in typescript, and decided to do some research and answer the question\nwhen should i use typescript? read the Alex blog about the topic.\nI wount go into the detail of when i should use typescript. That could be a subject for another post. Being a student i have alot time to learn\nso i decide to at least spend some time learning javascript in a deep way to try and understand commonly misunderstood concepts. Hope you code along me when performing this examples.\nUp and Going In this deep dive you will learn about:\n Webstandards Sematic markup Well commented code  The code isn\u0026rsquo;t just your Job anymore, its your craft\nwe will be intrested with javascript syntax and understanding the terminology. You already know javascript to be the foundation of interactive expriences on the web. I have come to understand that javascript is one of the easiest language to get started with, i had let the typescript advertisement get to me. I dont say typescript is not awesome , but it is transpiled to javascript eventually.\nThe trouble with javascript is that is can be used without understanding how the internal works, the understanding of language is never attained.\nWe get Answers of How and why The language behave the way it does but before that let me promote the language first\n Javascript is awesome. Javascript is easy to learn and much harder to learn completely  When we developers encounters confusion we usually tend to blame the language instead of their lack of understanding.\nwhen i say javascript what to i mean? Yes! a programming language with a specific syntax used to write the source code.\n Syntax -\u0026gt; the rule for valid format and combination of instructions. Source code -\u0026gt; A set of instructions to tell the computer what task to perform.  Statements A group of words , numbers and operators that performs a specific task . Example\n1 2  a = b * 3;    3 -\u0026gt; literal value a \u0026amp; b are variables (sybolic placeholders for the values themselves.  Most Javascript statements ends with a semicolon ; at the end.\nPrograms are usually just a collection of many such statements which together describe all the steps.\nExpressions An expression is any reference to a variable or value , or a set of variables and values combined with operators.\nlet take the above example\n1  a = b *3;   The above statement contains four expressions in it.\n 2 -\u0026gt; literal value b -. variable expression (used to retrieve its current value b * 3 -\u0026gt; arithmetic expression which in this case its (multiplication) a = b * 3 -\u0026gt; assignment oxpressions (assings the result of b * 3 to a )  Executing a Program Executiong is also refered to as running the program.\nstatement like a = b * 3  are good for developers to read and write code but not very uselful to the computer. A special utility on the computer can\neither be an interpreter or a compiler is used to translate the code you write into command that computer can understand..\nTranslation is done ahead of time is called compiling code so whe the program run later what is runnind is actually the compiled source code.\nJavascript is interpreted because your Js code is processed each time it\u0026rsquo;s runs. This is not completely accurate since the JS engine actually compiles\nprogramm on the fly and then immediately runs the compied code.\nOutput 1 2 3  console.log( a ); // using the dom api  alert( a );   Input Receivind information from the users most common is to use html elememt like a text boxes to the user that she can type into and then JS to read those\nvalues.\n1 2 3  age = prompt ( \u0026#39;please tell me your age\u0026#39; );   Operators    Operators Examples of Operators     1. Mathematical operators + , - , / , *   2. Assignement operators a = 3   3. Compound assignment += , -= , and /= ie a +=2   4. Increment /decrement ++ (increment ) , \u0026ndash;(decrement ) a++   5. Equality operators ==(loose equals) , ==== (strict equals) != (loose not equals) , !== (strict not equal)   6. Comparison operators \u0026lt; (less than ) , \u0026gt; (greater than) , \u0026lt;=(less than or loose equals )   7. Logical operators \u0026amp; (and) ,    Values and Types    Type values examples     numbers 45, 4, 35, 33, 555.45,   strings \u0026ldquo;Edwin\u0026rdquo; , \u0026lsquo;Muraya\u0026rsquo;   boolean true , false    Combination of the Types and Values form arrays and Objects.\nCoersion Between types. This can be done explictly or implicit.\nCode comments The choices you make about how to write program that works correctly but programs that make sense when examined.\nCode comments are bits of text in your program that inserted purely explains things to a human being reading your code.\nThe interpreter/ compiler will ingnore these comments.\nA general guideline to writing comments in the code.\n code without comments is suboptimal Too many comments is probably a sign of poorly written code. Comment should explain why not what .  types of comments\n1 2 3 4 5 6 7  // single line comments  /* multi line comments */   Variables (containers) Holds a specific type of a value. JS uses dynamic typing meaning variables can holds value of any type without any type enforment.\n1 2 3 4 5 6 7  var amount = 99.99; amount = amount * 3; console.log( amount ); amount = \u0026#34;$\u0026#34; + String( amount ); console.log( amount );   Amount holds a running value that changes ove the course of the program. Primary purpose of the variables is to manage the state of the\napplication. (program state management).\nconst\t-\u0026gt; useful just like variables with unchanged values except that constant also prevent accidentally changing value initially set.\nBlock A group or a series of statement together which we often call a block. {}\n1 2 3 4  { amount = amount * 2; console.log( amount ); }   Blocks are usualyy attached to some other control statements such as an if statement.\n1 2 3 4 5 6  var amount = 99.99; if( amount \u0026gt; 10 ){ amount = amount * 2; console.log( amount ); }   Conditionals 1 2 3 4 5 6 7 8 9  var bank_balance = 302.12; var amount = 99.99; if( amount \u0026lt; bank_balance){ console.log(\u0026#39; I want to bu this \u0026#34;); } else { console.log( \u0026#39;No thanks\u0026#39; ); }   Other conditionals include the Switch statement.\nLoops Repeats a set of conditions until a certain condition fails, repeats only when condition holds.\nA loop includes a condition check as wells as a bloc of statements and each time a loop block executs , it called a interation .\nexample\n1 2 3 4 5 6 7 8 9 10  // while loop code  while( numofCustomer \u0026gt; 0) { console.log(\u0026#39;how may i help you?\u0026#39;); numofCustomer -=1; } // do loop code  do{ console.log( \u0026#39;how may i help you\u0026#39;); numberofCustomer = numberofCustomer - 1; } while(numberofCustomer \u0026gt; 0);   If condition is false , a while loop will not run but a do while loop will run just for the first time.\nThe condition is tested on each iteration and you could use break statement to stop a loop.\nExample of another loop is the For loop.\n1 2 3  for( var i = 0; i \u0026lt; 9; i=i+1) { console.log( i ); }   the loop contains the following.\n initialization clause var i = 0 conditional test clause i\u0026lt;9 update clause i=i + 1O  Transpiling There\u0026rsquo;s no way to polyfill new syntax that been added to the language. The new syntax would throw an error in the old JS engine os recognisezed/invalid.\nThe better option is to use a tool that convert your newer code into older equivalents.A process called \u0026ldquo;transpiling\u0026rdquo; a term for transforming + compiling.\nYour source code is authored in the new syntax form, but what is deploy to the browser is the transpiled code in old syntax form.\nThe transpiler is inserted to your buil process, similar to your code linter or your minifier. Then why would you write new syntax only to have it\ntranspiled away to older code- why not just write the older code directly?\n some reasons for this are\n  The new syntax added to language is designed to make your code more readable and maintainable. You would prefer writing new syntax not only for\nyourselve but also for your development team. If you transpile only for older browsers, but serve the new syntax to the newest browsers, you get to take advantage of browser perfomance optimization\nwith the new syntax. This also lets browser makes have more real-world code to test their implementations and optimizations on. New syntax allows it to be tested more robustly in the real world , which provides earlier feedback to the Javascript committee.  1 2 3 4 5 6 7 8 9 10 11 12 13 14  // ES6 code function foo( a = 2 ){ console.log( a ); } foo( ); // prints 2 foo(5); //prints 5  // transpiled to the code below function foo() { var a = arguments[0] !==(void 0) ? arguments[0] : 2; console.log( a ); }   As you see it checks to see if the arguments[0] value is void 0 (aka undefined) and if so provides the 2 default value; otherwise, it assigns whatever was\npassed. Transpilers should now be thought of as a standar part of the JS developmend ecosystem and process. JS is going to continue to evolve, much more\nquickly than before, so every few months new syntax and new features will be added.\n Examples of transpilers for you to choose from. Here are good ones to try.\n  BABEl\n- Transpiles ES6+ into ES5 Traceur\n- Transpiles ES6 , ES7 and beyound into ES5  Non-JavaScript The reality of this language is written to run in and interact with environments like browsers. A good chunk of the stuff that you write in your code is,\nstrictly speaking, not directly controlled by Javascript. That probably sounds a little strange. A good example is the Dom Api for example.\n1 2  var el = document.getElementByID(\u0026#39;foo\u0026#39;);   The document varible exist as a global variable when your code is running in the browser. It\u0026rsquo;s not provided by the Js engine, nor is\nit particulary controlled by the Javascript specification. It takes the form of something that looks an awful lot like a normal JS object, but it\u0026rsquo;s not really exactly that. It\u0026rsquo;s a special object, often called a host object.\nThe getElementByID(..) method on document looks like a normal JS function, but it\u0026rsquo;s just a thinly exposed interface to built-in method provided by the DOM\nfrom your browser. In newer browser the layer my be in JS but in older browser the layer is in c/c++.\nAnother example could be the input/output (I/O).\nThe alert() pops us a message box in the user\u0026rsquo;s browser window. alert() is provided to your JS program by the browser, not by the JS engine itself.\nThe call you make sends the message to the browser internals and it handles drawind and displayind the message box.\nThe same goes to console.log() your browser provides such mechanisms and hooks them up to the developers tools.\nReview The first step to learning Js flavor of programming is to get a basic understanding ot its core mechanisms like :\n values types function closure this prototypes.  Serious developers in other languages expect to put the effort to learn most of all of the language(s) they primarily write in, but JS developers\nseem to stant out from the crowd in the sence of typically not learning very much of the language. This is not a good thing, and it\u0026rsquo;s not something\nwe should continue to allow to be the norm.\nAt this moment, am going to ask you guys.\nAre you up for the challenge, or do you want to learn the most minimum of js to get you started in code?\nHere is my answer, i would love to invest my time know to learn the internal of js and be able to answer the why question in code.\nSo let go into it.\nwe are going to go in this order and what we will cover in each step.\n  Scope and Closures\n how scoping of variables really works in javascript. common misconceptions that js is an \u0026lsquo;interpreted language\u0026rsquo; and therefore not compiled. Deeper understanding of the compiler approach, how to find and deal with variables and functions declarations. Scope management (hoisting) lexical scope and closure as the main important concept of js    this and Object prototypes.\n Understant the this keyword and common mistakes. Prototype behaviour pattern, behaviour delegation    type \u0026amp; Grammar\n Type coersion. implicit coercion and explicit coersion. What part of coeasion make complete sense if given the time to learn. do you want to keep following what the crowds say or are you willing to\nset all the assumptions aside and look at coersion with a fresh perspective.    Async \u0026amp; Performance\n Asynchrony programming in not only critical to the performance of our applications , it\u0026rsquo;s increasingly becoming the critical factor in writabiliy\nand maintainability. callbacks inversion of control. promises and generators. Parallelism with Web workers techniques. Performance optimization.    ES6 \u0026amp; Beyond\n Destructuring default paremeter values, symbols concise methods Computed properties arrow functions block scoping promises generators iterators Modules proxies weakmaps    ","description":"","id":3,"section":"posts","tags":["backend","frontend"],"title":"Javascript deep Dive , Understanding the basic concepts","uri":"https://eduuh.github.io/posts/jsupngoing/"},{"content":"Quickstart to React  React is a Javascript library created by Facebook. React is a User Interface (UI) library. React is a tool for building UI components React is used to build single page components React allow us to create reusable components.\nYou see how i repeat myself here. You get the point Its react! am writing about.  Before jumping to react you will need to have the basics of the following:\n what is HTML What is CSS What is Dom what is ES6 What is Node.js What is npm  If you cant answer the question ,jump to freecode camp org to get started.\nHow does React Work  React creates a virtual dom in memory.  Instead of manipulation the browsers Dom directly, React create a virtual dom in memory,where it does all the necessary manipulatiog,before making the changes in the browser Dom.   React change only what needs to be changed   React finds out what changets have been made, and changes only what needs to be changet.  Create React App In order to learn and test react you will need to have React Environment installed in your local computer.\nYou will need to install node.js ,npm and create-react-app.\nNode.js Node.js is a javascript runtime built on chrome's V8 Javascript engine. Go to the site and you will find installation guide.\nnpm Npm is a software registry where Open source developer , Organisations from any continent share or borrow packages. Npm is used to manage pakage release, versioning and even dependency trees.\ncreate-react-app The create-react-app is an officially supported ways to create react applications.\nIf you have NPM and Node.js installed, you can create a React application by first installind the\ncommand line tool create react app\nInstall create-react-app by running the command in the terminal.\n npm install -g create-react-app After the install is complete, You are now ready to create your first react application!.\nRun this command to create your react application named myreactapp.\n npx create-react-app myreactapp # create a react application inside myreactapp folder. The create-react-app will set up everything you need to run a react application.\nRunning your first react application If you followed the two commands above,you are ready to run your first react application. Go back to the command line and move to the directory myreactapp.\n cd myreactapp # cd =\u0026gt; change directory npm start # This will start a development server with expose your app on port 3000 A development server is started, a new browser window will pop up with your newly created React app!. If not open\nthe browser and type localhost:3000\nWhat you should Know Before starting React js you should have intermediate experience in.\n Html CSS Javascript  You should also have some experience in the new Javascript features introduced in ECMAScript 6 (ES6) ,you will learn them in React ES6 section below.\nReact ECMAScript 6. ECMAScript was created to standardize Javascript, and ES6 is the 6th version of ECMAScript, it was published in 2015 and is known as ECMAScript 2015.\nWhy Should I Learn ES6 React uses ES6, and you should be familiar with some of the new features like.\n classes Arrow Functions Variables (let , const ,var)  Classes ES6 introduced classes.\nA class is a type of function(funny), but instead of using they keyword function to initiate it, we use the keyword class, and properties are assigned inside a conrtructor() method.\n1 2 3 4 5  class car { constructor(name){ this.brand = name; } }   Now you can create objects usind the Car class.\n1  mycar = new car(\u0026#34;Ford\u0026#34;);   The constructor fuction is called automatically when the object is intialized.\nMethods in classes Create a method named \u0026lsquo;present\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 11 12  class Fruits { constructor(...fruits){ this.fruits = [...fruits]; } printFruits(){ console.log(fruits[0]); } } myfruits = new Fruits([\u0026#39;orange\u0026#39;,\u0026#39;mango\u0026#39;,\u0026#39;bananas\u0026#39;]); myfruits.printFruits();   Class Inheritance To create a class inheritance we use the extends keywords.\nA class created with a class inheritance inherits all the methots from another class.\nExample\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class Animal { constructor(name, age){ this.name = name, this.age = age } showDetails(){ console.log(\u0026#34;name is:\u0026#34; +name + \u0026#34;age is : \u0026#34; +age); } } class Type extends Animal { constructor(name, age){ super(name,age); this.type = type; } type(){ switch(this.name){ case \u0026#34;lion\u0026#34;: type = \u0026#34;Canivorou\u0026#34;; break; default: type = \u0026#34;animal type not known\u0026#34;; } } } lion = Type(\u0026#39;lion\u0026#39;,34); lion.showDetails(); lion.type();   ","description":"React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications","id":4,"section":"posts","tags":["React"],"title":"Quickstart to Installing React and React ES6 Review","uri":"https://eduuh.github.io/posts/gettingstartedwithreact/"},{"content":"Algorithms What makes an algorithm fast? To answer this question, it tend to be grouped in two categories. With respect to input size\nand also assuming the worst case scenario.\n Time complexity Space Comlexity  Time complexity Here we answer the question of how many primitive operations are executed?\nTime complexity of an algorithm signifies the total time required by the program to run to completion. The tim complexity of algorithms is\nmore commonly expressed usind the big O notation.\nBig-O notation gives us an Industry-standard language to discuss the performance of algorithms. Not knowing how to speak this language\ncan make you stand out as an inexperienced programmer.\nSpace Complexity Here we are answering the question of How much memory is Used?\nProblem to think On Given a list of hotels return the price range of hotels in a given search result. Lets write the algorithm..\n1 2 3 4  var hotels = [ {price : 200, brand : \u0026#34;best eastern\u0026#34;} .... ]   solution We\u0026rsquo;d expect that the more data we have, the longer it will take to figure out the min and max required for the range.\nHowever, as our dataset grows, the cost can grow really fast or slow!\nApproch 1 : Compare all numbes to one another. As our data grows, how much does our work increases?\n   # of hotels (n) 3 5 10 100     #ops 9 25 100 1000   We can call this n^2 ,where n is the number of hotels. As n grows, the amount of work increases at that rate.        Approach two: Trach min \u0026amp; max How many comparison were made? We have to for loops each tracking the minimum and the max values.\nwe consider this 2*n because as the data grows, the number of work increase by 2.\nIts faster, less comparison are made for this.\nApproach 3: Sorted List Here you know where the min and max. We get the first and the last numbers.\n   # Operations Big-O Algorithm     n^2 (quadratic) compares all the numbers   2n (Linear) Find min and and max values   2 ,constant Sorted list find first and last    As the input grows.\nsuper fast\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;super slow\n|Name |constant | logarithmic |linear | quadratic | exponential|\n|\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n|Notation|O(1) | O(logn) | O(n) | O(n^2) | O(e^n) |\ncheck out the big o chart\nNative Methods \u0026amp; JS Expressions Time complexities  Arrays : linear  1 2 3  const arr = [1,2,3] arr.pop() //=\u0026gt; {1,2]} arr[1] // dont need to start from index one, it know where the value is   Object : linear  1 2 3  const obj = {a: 1}; obj.a // -\u0026gt; 1    Calculating Time What to we do if we have multiple expressions/loops/etc?\n what about o(logn)?  A little better that linear.\nComplexity of Common Operations    complexity operation     O(1) Running a statement   O(1) value look-up on array, object,variable   O(logn) loop that cuts a problem in half every iteration   O(n) Looping through the value of an array   O(n^2) Double nested loops   O(n^3) Tripple nested loops    Space Complecity The space that it take up in the memory. Are you making a new\ndata structure how often are you doing that?.\n","description":"What makes an algorithm fast? To answer this question, it tend to be grouped in two categories. With respect to input size and also assuming the worst case scenarios of either time complexities or space complexity.","id":5,"section":"posts","tags":["Js","DataStructures"],"title":"JavaScript Algorithm and Data Structures","uri":"https://eduuh.github.io/posts/jsargorithms/"},{"content":"Section 1 Hello am Edd and I will be taking you through this workshop.By the end of this workshop, if you follow along you have a completely different understanding of Git and how you work with it.\n How we will go along  I will start will a short demo on the command line to introduce the new material.\nAfter a bit we will have some exercise for you to practise what we were going through. After you finish the exercises we are\nthen going to it together, to make sure you understand.\nRequirements  Command Line that support unix style commands git version \u0026gt; 2.0 (check with git \u0026ndash;version) github.com account This Repository 👇  1  git clone git@github.com:eduuh/Advanced-GitWorkshop.git   Are we all good at these requirements. Okay Let get into it.\nI know when we learn git we memorize 6 command the rest of git is usually a black box that we don\u0026rsquo;t explore. We reach at a point where we really on the GUI tool available for working with git. I.e visual studio code.Today we are going to go a lot deeper to git away from this basic commands and explore git further.\nMy \u0026ldquo;assumption\u0026rdquo; is you are familiar with this commands. Don\u0026rsquo;t worry if you are a beginner you will get into pace soon.\n   Command Action     git clone clone a remote repository : github, gitlab , azure repos   git push Push local repository to remote service   git fetch Pull changes to a local repository   git pull -f git fetch + git merge (used flags right)   git init Initialize a repository locally   git add \u0026amp; git commit Add changes to a local repository.    If you are not famialiar with the above commands. Please bare with me, this are usually common concept that we can\u0026rsquo;t do without them. When we come across them i will explain to you what they do.\nI felt this way untill i decided its time to level up a little bit and come out of my confort zone. Using GUI tools. In my case visual studio code.\nDo you feel this way?\nIts a sad place to be. Are you exited to not do this anymore!?\nI will try to get you out of this showing you how to use git the right way.\nBefore you delete you could decide to look up some manual page for git online and this is what you might get.\nWAT?\nThe SYNOPSIS WTH does it mean??\n git refers to its self as A stupid content tracker funny\nBut this depends on how your use case and mood.\n  Notes  People use git for different use cases. You should try to use the idea from this workshop and incoporate them to your workflows.\nI have divided this workshop into sections , and after each sections. Am going to give an exercise which you will attempt. And then we are going to them together.\nLets focus more on doing and understanding the theory. This is what i mean. Instead of writing down the notes focus on trying out the commands. You have all these notes with you.\nGit is a tool to helps you,but not work against you.\nGit concepts  Untracked Files  New files that git have not requested to track previously.\n Working Area  Worked that is tracked by git that has been modified but have not yet been commited.\n Staging Area  Modified files that have been marked to go the next commit.\nThis are terms that will appear mostly in this workshop.\nHow is information stored. At its core, git is like a key value store.\n Value = Data (our files) Key =\u0026gt; Sha1 Key   Key  Its a crytographic hash function. Given a piece of data , it produces a 40 - digit hexadecimal numbers. You will see this in a bit.\nThis value should always be the same if the given Input it the same.\n Value  Git store the compressed data in a blob , along with the metadata in a header. Holds the identifier of the, size of the content and the content itself.\nNote: The content is compressed and when you cat into it you will get a whole lot of nothings.\nUnder the Hood - Lets create a git hash object. Git will take our content and use it to generate the hash key. For now we could supply some content to git using echo command.\nIf you run the command. Here we are piping the output of the echo command to the git hash function requesting to use the stdin\nThe hash function returns the a hash which should be the same for all of us.your can try this\n1 2  echo hello | git hash-object --stdin # ce013625030ba8dba906f756967f9e9ca394464a   We already know some tools that are used to generate sha1 keys. For my system I believe its openssl\nlets generate Sha1 using openssl\n1 2  echo hello | openssl sha1 # (stdin)= f572d396fae9206628714fb2ce00f72e94f2258f   Thes hash are different. This is because git hash function **prepends thes string \u0026ldquo;blob\u0026rdquo; followed by the file size and a null to the file\u0026rsquo;s content before hashing.\nThis is how git calculates the sha1 for the file (in git term a blob)\nGit calculate the files metadata + content , not just the content.\n1  # sha1(\u0026#34;blob\u0026#34; + filesize + \u0026#34;\\0\u0026#34; + data) # not \\0 is a null byte   When you run the hash function on the same content you will always get the same result.\n Lets initialize a repository  1 2  git init # Initialized empty Git repository in $HOME/username/dir/.git/   The initialized repository is store at .git directory.\nWhey you delete this folder in a repository you actually blow up the repository, but you retains the files that were availble in the working area.\n question: where are blob stored?  We are going to rerun the command that ask git to generate a sha1 key for the content but this time we pass a option , -w that indicates we want to write the object to the git repo.\n1 2  echo hello | git hash-object -w --stdin ce013625030ba8dba906f756967f9e9ca394464a   Take a note at the hash generated at this point. and lets access how it is saved in the git folder.\n lets do some clean up first\n Remove the hooks directory in the repository, so that it does not get into our way.\n1  rm -rf .git/hooks # r =\u0026gt; recusive f =\u0026gt; folders   Now you can tree into the .git folder to pic at all the content.\nNote if you have alot of files in your working directory u are going to have a longer structure. ***The output look something like.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  tree .git/ .git/ ├── branches ├── config ├── description ├── HEAD ├── index ├── info │ └── exclude ├── logs │ ├── HEAD │ └── refs │ ├── heads │ │ └── master │ └── remotes │ └── origin │ └── HEAD ├── objects │ ├── 07 │ │ └── 9830d5ae8de34a3faf6bd8ff8b680684948bec │ ├── ce │ │ └── 013625030ba8dba906f756967f9e9ca394464a   Our initial sha1 file was ce013625030ba8dba906f756967f9e9ca394464a.\nwhat do you notice?  Our blob is stored in the object folder. You can\u0026rsquo;t see that yet but you will.  2 Inside a subfolder which picks the first two char of the blob (ce)\n3.The blob object as the rest of the char (013625030ba8dba906f756967f9e9ca394464a)\nDo this Step by step  Create an empty directory and initialize a new repository  Copy the command as it will work.\n mkdir makes a directory. cd move into the directory git init initiaze the repository  1  mkdir test ; cd test ; git init   One you initialize a repository a .git folder is created where all git information is stored.\nThe .git folder have a few empty directories. If you have never checked the .git directory lets start now.\nCheck the folder structure of the .git directory.  1 2 3 4 5 6 7 8 9 10 11 12  ls -la .git drwxr-xr-x 7 edd eduuh 4096 Feb 15 19:45 ./ drwxr-xr-x 3 edd eduuh 4096 Feb 15 19:45 ../ drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 branches/ -rw-r--r-- 1 edd eduuh 92 Feb 15 19:45 config -rw-r--r-- 1 edd eduuh 73 Feb 15 19:45 description -rw-r--r-- 1 edd eduuh 23 Feb 15 19:45 HEAD drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 hooks/ drwxr-xr-x 2 edd eduuh 4096 Feb 15 19:45 info/ drwxr-xr-x 4 edd eduuh 4096 Feb 15 19:45 objects/ drwxr-xr-x 4 edd eduuh 4096 Feb 15 19:45 refs/   Remove the .git/hooks folder. you dont need for now  1  rm -rf `.git/hooks`   Look at the folder structure in a graphical way using the tree command.  1  tree .git/   Lets add a file in our repository. Using the echo command you can redirect the output to a file.  1 2 3 4 5 6 7 8  # will write the line ot gitstuff.txt file echo \u0026#39;an awesome guide to git\u0026#39; \u0026gt; gitstuff.txt # you can check the content of the file using cat command cat gitstuff.txt git hash-object -w gitstuff.txt # 24997081c3c51eeac9df4309dbcc9452112a8f1f   You should have the same hash code as i get here as long us you use the same content as i did.\nThis time the git hash function command takes a path to a file unlike intially where echo was used to input to the stdin of the function\nSomething i realize with the **ls -la** command that actually the blob is a file. We can just read from it since it compressed into a **c binary** file. Lets try fo fun  lets us the find command to look for all files. Since we now know the blob are store in the object we could narrow our search in directory.\n1 2  find .git/object/ --type f # .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f   We\u0026rsquo;ve created our first object! this is a binary file that holds what we just saved.\nNote The object id is choosen based on the content of the object. This is how git stores our object. Let me use the right word here content-addressable filesystem.\nLets try to save the same file again.  1  git hash-object -w gitstuff.txt   Because it the same content, nothing changes we will receive the same sha1 hash key\nQuestion: How can we see the content of the blob??  When you cat pathtofile you will get a whole lot of nothing.To be more accurate a binary output\nLets try\n1 2 3 4 5 6  # use the find command to get the path find .git/objects -type f # .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f cat .git/objects/24/997081c3c51eeac9df4309dbcc9452112a8f1f # xK��OR02aH�SH,O-��MUH/�LIU(�WH�,���   Git provides a functions to view the content of blobs.cat-file\n -p =\u0026gt; print out pretty print -t =\u0026gt; print out the type  For this command you use the sha1 hash as the arguement.\n1 2 3 4 5  git cat-file -p 24997081 # an awesome guide to git git cat-file -t 24997081 # blob   Useful commands    command detail     mkdir  creates a directory   git init initialize git in the directory   ls -la .git lists the content of the .git directory   find .git/object/ -type -f list all files available in a directory   git hash-object -w  Saves the files to a git object store.   git cat-file -p  pretty print the content of the object in the git object store.    Exercise 1 These are some exercise to get used to the idea of storing to and\nretrieving files from git objects store.\n   create a new directory, and initialize it.\n    look inside the .git folder. make sure you indetify folders and files\n    use a text editor or the command line to create multiple files and write some text to it.\n    use git hash function to generate the sha1 hash and save the object to the git object store.\n    Use git command to inspect the object in the database.\n   Under the Hood of a commit For a commit to be complete we need to store the information about thefile\nThe basic way git store information is using blob and trees .\nOur blob does not store all the information.\n filenames. directory structure.  Question: wheres is this information stored in git? Trees A git tree object creates a hierachy between files in the git repository and the directory structures.\nEvery commit holds a single tree . A tree holds the following informantion.\nTree points to other.\n blob Also point to other trees.  Metadata of the tree\n type of pointer filename of directory name mode (excutable file, symbolic link,..)  Lets do it step by step Let\u0026rsquo;s start with a new sample repository again,but this time we doing things manually, so we get the feeling of what is happening under the hood.\nFor the repository we created a while back lets delete the .git folder . and initilize a new repository.\n1 2 3 4 5  rm -rf .git # create a file again echo \u0026#39;Hello , Edwin\u0026#39; \u0026gt; greeting.txt git init git add greating.txt   Lets say it all start when we add the file to the index / staging area. When I added the file to , a change occured in my repository this can\u0026rsquo;t be view as a commit yet but there is a command to see what happened.\n1 2  git ls-files --stage # 100644 9f704ffe0495c8f1416cc004f5638e06e78bf14e 0 greeting.txt   We have not commited anything yet but we already have an object in our repo. Let get the hash id of\nour content in the file we already know how to do that.\n1 2  git hash-object greeting.txt # 9f704ffe0495c8f1416cc004f5638e06e78bf14e   You realizes the the hash key is the same as that of the content of the greeting.txt\nYou could also use the cat-file -t on the hash to see the type of the object it represent. At this case you will find that its a blob.\nthe same file will always result with the same blob. 1 2  git cat-file -t 9f704ffe0495c # blob   At this point , The blob is not reference by any tree and there are no commits yet. At this point the object is anly referenced from a file named .git/index which reference the blob and the tree that makes up the current index.\nLets make a tree 1 2  $ git write-tree # 438fa6e39f5e86e72bd959b0c12019f1e39cc70d   A tree containing the same blob or sub-blobs will always have the same hash id. We dont have a commit but we have a tree now.\n Lets make a commit manually by using the tree directly\n 1 2  echo \u0026#39;Initial commit\u0026#39; | git commit-tree 438fa6e39f5e # 672df89e038ea79fdac61e8686afe65d07b49dbb   the raw commit function takes the tree\u0026rsquo;s hash id and makes a commit object to hold it. If i wanted the commit to have a parent i could specify the parent commit with -p .\nNote my commit hash id and your will be different since it uses my name and the current date as the content to generate the commit object.\nlet see a commit object. A commit is a code snapshot.\nA commit points to\n A tree A parent commit  and contains metadata: The content used to generate the Sha1 files.\n author and committer\ndate\nmessage\nparend commit (one or more)\n Identical content is only store once.\nOptimization - Packfiles and Deltas   Git object are compressed .\n  As files change, their content remains mostly similar.\n you might add a method here or there.    Git optimize for this by compressing these files together, into a Packfiles.\n  The packfile stores the object and deltas , of the differences between one version of the file and the next.\n  Packfiles are generated when:\nYou have too many objects , during garabage collection, or during a push to remote.\n  Git perform a garbage collection once in a few weeks or when you explicity request it to.\nYou kind of start to understand what happens during a git push where you see that message.\n compressing deltas\nThe sha1 of the commit is the hash of all this information.\n Practically  lets perfom a git status on the repo we created.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  git status On branch master No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) learn-copy.txt learn.txt git add . # add all the files to the staging area git commit -m \u0026#34;finished working on gitworkshop\u0026#34; [master (root-commit) 3cb087a] finished working on git workshop 2 files changed, 4 insertions(+) create mode 100644 learn-copy.txt create mode 100644 learn.txt tree .git/objects .git/objects/ ├── 1e │ └── 234f233918794921501400511445247278c890 ├── 3c │ └── b087a3be11296eee71a0527dfe77a139688d68   Note after a commit, git provide the first character of the sha1 hash identifier for the commit. for this case its 3cb087a .\nA commit object is also store similary to the blobs.\nWhen you look into the .git/objects directory using the tree\ncommand. you notice that the commit create a folder structure and has an object in it.\nGit-file -T (Type) and -P (PRINT) THE CONTENT 1 2 3 4 5 6 7 8 9  $ git cat-file -t 3cb087a commit $ git cat-file -p 3cb087a tree 1e234f233918794921501400511445247278c890 author eduuh \u0026lt;edwinkamaumuraya0@outlook.com\u0026gt; 1581803358 +0300 committer eduuh \u0026lt;edwinkamaumuraya0@outlook.com\u0026gt; 1581803358 +0300 finished working on git workshop   What we Learn from this  We can\u0026rsquo;t change the Commits! You cannot rewrite history.\nwe can\u0026rsquo;t go back and change the author or any other data.\n   If you change any data about the commit, the commit will have a new SHA1 hash.\n  Even if the files don\u0026rsquo;t change the date will and this result to a new hash\n  This give use the sense of high security in git and you will always know that your commit history will always maintaint its integrity. No one in your team can mess with your commit message without becoming obvious.\n  It also secures agaish corruption. If files on the disk change, the repository will notify that the content do not match.\n  REFERENCES POINTERS TO COMMITS . Are stored in .git/refs directory\nExamples of References.\n tags =\u0026gt; Points to a speciefic commit. They don\u0026rsquo;t change : used to version you code. branch =\u0026gt; Points to the latest commit. HEAD =\u0026gt; Point to the current branch  Folder Stucture of the .git folder 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # Just copied a section.It is bigger that this. ├── HEAD ├── index ├── info │ └── exclude ├── logs │ ├── HEAD # point to the latest commit │ └── refs │ ├── heads # all the branches lives here │ │ ├── git1 │ │ ├── git2 │ │ └── master │ └── remotes │ └── origin │ ├── HEAD │ └── master   Note: the branches live in the .git/refs/heads/master let check the master branch and see what it points to. we could use the cat command.\n1 2 3 4 5 6 7 8 9 10  cat .git/refs/heads/master/ 3811dbf83556ffc5d50f9ac3a387b8f29c3d06c1 # Confirm this with git log git log HEAD --oneline #3811dbf (HEAD -\u0026gt; git2, origin/master, origin/HEAD, master, git1) Section one: part one covered #head is the pointer to the current branch cat .git/HEAD # ref: refs/heads/git2   There are instance when head can point to commits we are goint to review the cases.\nQuestions: Why are checkouts in git really fast? This is because, there in no pulling in other data. but its just changing the pointers.\nReview: Places where code lives  Working area Staging area Repository  Working area The files in your working area that are also not in the staging area are not handled by git.\nAlso called untracked files\nThe staging area  What files are going to be part of your next commit. the staging area is how git knows what will change between the current commit and the next commit.  Tip: a clean staging area isn\u0026rsquo;t empty! consider the baseline staging area as being an exact copy of the latest commit. The Repository The files git knows about ! Contans all of your commit.\nthe repository is stored in the .git folder.\nMoving files in \u0026amp; of the staging area    command Action     git add  Add a file to the next commit.   git rm  delete a file in the next commit   git mv  rename a file in the next commit:    Git ADD -p  One of my favorite tools  allows you to stage commits in hunks Interactively\nIt\u0026rsquo;s especially useful if you\u0026rsquo;ve done too much work for one commit.\nUnstage files fron the staging area Not removing the files\nYou\u0026rsquo;re replacing them with a copy that\u0026rsquo;s currently in the repository.\nGit STASH This is usually a way to save uncommited work. The stash is safe from destructive operations.\nchanging between branches which requires you to have commited all your changes.  Git stash Basic use    Command Action     git stash stash changes   git stash list list stashed changes   git stash show stash{0} show content of the stash   git stash apply apply the last stash to the working directory   git stash pop applys the last stash and deletes it   git stash drop stash{0} deletes a specified stash from memory    By default git stash stash tracked files that are either in the repository or staging area.\nAdvanced STASHING - Operations Let give a scenario. You have added a new file in the repository and you dont want to git add it yet, but you need\nto switch to a different branch. Advanced stashing comes in\nhandy. If you switch to a different branch with untracted files\nin your working area you could accidentally commit this file.\nKeeping untracted file it a stash    Command Action     git stash \u0026ndash;include-untracked Stash even the untracked files (very uselful)   git stash -all Use this with caution. Stashes even ingnored files   git stash save \u0026ldquo;WIP: making progress on foo\u0026rdquo; Names stashes for easy reference   git stash branch  Make a new branch from a stash   git checkout \u0026ndash;filename Grab a single files from a stash   git stash pop applies the last stash. Does not apply if there is a conflict   git stash drop stash@{0} Remove the specified stash   git stash clear Removes all the stash    Exercise 2  Create a new folder and initialize it as a git repo Create a file, stage it, and commit it to your new repo Look at your .git folder, using tree if you have it Inspect the objects in your .git/objects folder using git cat-file. See if you can find the tree, blob, and commit objects for your recent commit. Look at your .git/HEAD and .git/refs/heads/master files and see if you can figure out where these references are pointing to.  Solutions Step 1 - Initialize the Repo Create a new sample project folder. Run git status to see that it is not yet a git repository. Use git init to initialize it as a repository.\n$\u0026gt; mkdir -p ~/projects/sample $\u0026gt; cd ~/projects/sample $\u0026gt; git status fatal: Not a git repository (or any of the parent directories): .git $\u0026gt; git init Initialized empty Git repository in /Users/nnja/projects/sample/.git/ Step 2 - First Commit Create a new document, stage it for a commit, then commit it to your repository.\n$\u0026gt; echo 'Hello World!' \u0026gt; hello.txt $\u0026gt; git add hello.txt $\u0026gt; git commit -m \u0026quot;Initial commit\u0026quot; [master (root-commit) aceb9e8] Initial commit 1 file changed, 1 insertion(+) create mode 100644 hello.txt Step 3 - View the .git Folder Using tree, look in your .git/objects folder, you should now see three objects, represented by long SHA1 hashes. These represent the tree, blob, and commit that we created in the last step.\n$\u0026gt; tree .git .git ├── COMMIT_EDITMSG ├── HEAD ├── config ├── description ├── index ├── info │ └── exclude ├── logs │ ├── HEAD │ └── refs │ └── heads │ └── master ├── objects │ ├── 43 │ │ └── 388fee19744e8893467331d7853a6475a227b8 │ ├── 58 │ │ └── 1caa0fe56cf01dc028cc0b089d364993e046b6 │ ├── 98 │ │ └── 0a0d5f19a64b4b30a87d4206aade58726b60e3 │ ├── info │ └── pack └── refs ├── heads │ └── master └── tags Step 4 - Inspect the Objects: Note: The SHA1 hash for your commit will be different than the one displayed here. The SHA1 hash for your blob and tree will be the same as mine, as long as the content is the same.\nOne of the objects should be a tree object. The tree contains the filename hello.txt and a pointer to the blob.\n$\u0026gt; git cat-file -t 581caa tree $\u0026gt; git cat-file -p 581caa 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3\thello.txt The blob object, pointed to by the tree, contains the contents of the file hello.txt\n$\u0026gt; git cat-file -t 980a0d5 blob $\u0026gt; git cat-file -p 980a0d5 Hello World! The commit object contains a pointer to the tree, along with metadata for the commit, such as the author and commit message.\n$\u0026gt; git cat-file -t 43388f commit $\u0026gt; git cat-file -p 43388f tree 581caa0fe56cf01dc028cc0b089d364993e046b6 author Nina Zakharenko \u0026lt;nina@nnja.io\u0026gt; 1507168309 -0700 committer Nina Zakharenko \u0026lt;nina@nnja.io\u0026gt; 1507168309 -0700 Initial commit Because this is our very first commit, it doesn\u0026rsquo;t have a parent. The next commit we make will point to our initial commit as the parent.\nStep 5 - Look at refs Let\u0026rsquo;s look under the hood at our HEAD variable. HEAD is just git\u0026rsquo;s pointer to \u0026ldquo;where you are now,\u0026rdquo; usually referring to the current branch. More on this later. We can see that right now, it points to our current branch - master\nNow, if we look at our master reference, we can see that it points to the latest commit.\n$\u0026gt; cat .git/HEAD ref: refs/heads/master $\u0026gt; cat .git/refs/heads/master 43388fee19744e8893467331d7853a6475a227b8 43388f... is the hash of the commit we saw in the last step. You can confirm this by running git log\n$\u0026gt; git log --oneline 43388f Initial commit Git stores references in the .git/refs/heads/ directory, and the HEAD pointer in .git/HEAD\nWe can verify this by creating a new branch.\n$\u0026gt; git branch new_branch The git branch command will create a new branch without switching to it.\nNow, if we look in .git/refs, we\u0026rsquo;ll see two branches. The master branch, which is created by default, and new_branch.\n$\u0026gt; tree .git/refs .git/refs ├── heads │ ├── master │ └── new_branch └── tags ","description":"Guide to git expert","id":7,"section":"workshops","tags":["version control","Productivity","git","github"],"title":"Advanced Git WorkShop","uri":"https://eduuh.github.io/workshops/git/advancedgit/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":9,"section":"gallery","tags":null,"title":"Photo","uri":"https://eduuh.github.io/gallery/photo/"},{"content":"Introduction A blog where i i will be writing on the following Technologies.\n React React Native Dotnet core Linux Terminal  Maintainer A Self Taught Developer : Edwin Muraya Currenty A BSC Geomatic and Geospartial Information System Student at Dedan Kimathi University\n","description":"","id":10,"section":"","tags":null,"title":"About Edds Blog","uri":"https://eduuh.github.io/about/"}]